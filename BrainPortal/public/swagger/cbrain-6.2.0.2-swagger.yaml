openapi: 3.0.1
info:
  title: CBRAIN API
  description: API for interacting with the CBRAIN Platform
  contact:
    name: CBRAIN Development Team
    url: https://github.com/aces/cbrain
  license:
    name: "GNU Public License, Version 3"
    url: https://opensource.org/licenses/GPL-3.0
  version: 6.2.0.2
servers:
- url: http://localhost:3000/
security:
- BrainPortalSession: []
paths:
  /session:
    get:
      tags:
      - Sessions
      summary: Get session information
      description: |
        This returns information about the current session.
      responses:
        "200":
          description: An object with the API token and the CBRAIN user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/SessionInfo'
        "401":
          description: No session created yet.
          content: {}
    post:
      tags:
      - Sessions
      summary: Create a new session
      description: |
        This is the main entry point to create a CBRAIN session. Note that if
        a user is currently logged in, a new session will not be created,
        and the current session will be re-used.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - login
              - password
              type: object
              properties:
                login:
                  type: string
                  description: The username of the user trying to connect.
                password:
                  type: string
                  description: The password of the user
                  format: password
        required: true
      responses:
        "200":
          description: An object with the API token and the CBRAIN user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/SessionInfo'
        "401":
          description: Password authentication failed.
          content: {}
      security: []
    delete:
      tags:
      - Sessions
      summary: Destroy the current session
      description: |
        This destroys the current session, effectively terminating the
        access to the service.
      responses:
        "200":
          description: Session terminated
          content: {}
        "401":
          description: No session created yet.
          content: {}
  /users:
    get:
      tags:
      - Users
      summary: Returns all of the users in CBRAIN. Only available to admins.
      description: "Returns all of the users registered in CBRAIN, as well as information\
        \ on their permissions and group/site memberships."
      parameters:
      - name: page
        in: query
        description: Page number when paginating. See also the per_page parameter
        schema:
          type: integer
      - name: per_page
        in: query
        description: Size of each page when paginating. See also the page parameter
        schema:
          type: integer
      responses:
        "200":
          description: A list of all the users in CBRAIN.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "401":
          description: No session created yet.
          content: {}
    post:
      tags:
      - Users
      summary: Create a new user in CBRAIN. Only available to admins.
      description: |
        Creates a new user in CBRAIN. Only admins can create new users.
      requestBody:
        description: An object representing a request for a new User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserModReq'
        required: true
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "422":
          description: "Attributes are invalid, or user already exists"
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
      x-codegen-request-body-name: user_mod_req
  /users/{id}:
    get:
      tags:
      - Users
      summary: Returns information about a user
      description: |
        Returns the information about the user associated with the ID given in
        argument. A normal user only has access to her own information, while an
        administrator or site manager can have access to a larger set of users.
      parameters:
      - name: id
        in: path
        description: ID of the user
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: An object with the CBRAIN user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found with the specified ID
          content: {}
    delete:
      tags:
      - Users
      summary: Deletes a CBRAIN user
      description: |
        Deletes a CBRAIN User from the database
      parameters:
      - name: id
        in: path
        description: ID of user to update
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: User successfully deleted
          content: {}
        "401":
          description: Not authorized to delete this user.
          content: {}
        "404":
          description: User not found with the specified ID
          content: {}
        "409":
          description: "User cannot be deleted, as it has resources allocated to them."
          content: {}
    patch:
      tags:
      - Users
      summary: Update information about a user
      description: |
        Updates the information about a user
      parameters:
      - name: id
        in: path
        description: ID of user to update
        required: true
        schema:
          type: integer
      requestBody:
        description: An object representing a request for a new User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserModReq'
        required: true
      responses:
        "200":
          description: An object with the CBRAIN user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: User does not exist
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
        "422":
          description: Attributes are invalid
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
      x-codegen-request-body-name: user_mod_req
  /tool_configs:
    get:
      tags:
      - ToolConfigs
      summary: Get a list of tool versions installed.
      description: |
        This method returns a list of tool config objects.
      parameters:
      - name: page
        in: query
        description: Page number when paginating. See also the per_page parameter
        schema:
          type: integer
      - name: per_page
        in: query
        description: Size of each page when paginating. See also the page parameter
        schema:
          type: integer
      responses:
        "200":
          description: |
            An array of ToolConfig objects describing for each tool
            and execution server the available version numbers and the
            information about their local configuration.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolConfig'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ToolConfig'
        "401":
          description: No session created yet.
          content: {}
  /tool_configs/{id}:
    get:
      tags:
      - ToolConfigs
      summary: Get information about a particular tool configuration
      description: |
        Returns the information about how a particular configuration of a
        tool on an execution server.
      parameters:
      - name: id
        in: path
        description: the ID of the configuration
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: |
            A single ToolConfig object describing the configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolConfig'
            application/xml:
              schema:
                $ref: '#/components/schemas/ToolConfig'
  /tags:
    get:
      tags:
      - Tags
      summary: Get a list of the tags currently in CBRAIN.
      description: |
        This method returns a list of tag objects.
      responses:
        "200":
          description: |
            An array of Tag objects that are used to group Tasks or Userfiles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        "401":
          description: No session created yet.
          content: {}
    post:
      tags:
      - Tags
      summary: Create a new tag.
      description: |
        Create a new tag in CBRAIN.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TagModReq'
        required: true
      responses:
        "201":
          description: |
            Returns the created Tag object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tag'
        "401":
          description: |
            No session created yet.
          content: {}
      x-codegen-request-body-name: tag_mod_req
  /tags/{id}:
    get:
      tags:
      - Tags
      summary: Get one tag.
      description: |
        Returns a single tag with the ID specified.
      parameters:
      - name: id
        in: path
        description: The ID of the tag to get.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: |
            Returns the Tag object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tag'
        "401":
          description: |
            No session created yet.
          content: {}
    put:
      tags:
      - Tags
      summary: Update a tag.
      description: Update the tag specified by the ID parameter.
      parameters:
      - name: id
        in: path
        description: ID of the tag to update.
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TagModReq'
        required: true
      responses:
        "200":
          description: Tag was updated successfully.
          content: {}
        "401":
          description: No session created yet.
          content: {}
        "422":
          description: Could not update Tag.
          content: {}
      x-codegen-request-body-name: tag_mod_req
    delete:
      tags:
      - Tags
      summary: Delete a tag.
      description: Delete the tag specified by the ID parameter.
      parameters:
      - name: id
        in: path
        description: ID of the tag to delete.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Tag was deleted.
          content: {}
        "401":
          description: No session created yet.
          content: {}
        "422":
          description: Tag could not be deleted.
          content: {}
  /bourreaux:
    get:
      tags:
      - Bourreaux
      summary: Get a list of the Bourreaux available to be used by the current user.
      description: |
        This method returns a list of Bourreau objects.
      parameters:
      - name: page
        in: query
        description: Page number when paginating. See also the per_page parameter
        schema:
          type: integer
      - name: per_page
        in: query
        description: Size of each page when paginating. See also the page parameter
        schema:
          type: integer
      responses:
        "200":
          description: |
            An array of Bourreau objects describing an execution
            server available to be used by the current user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bourreau'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bourreau'
        "401":
          description: No session created yet.
          content: {}
  /bourreaux/{id}:
    get:
      tags:
      - Bourreaux
      summary: Get information about a Bourreau.
      description: |
        This method returns a single Bourreau object based on the
        ID parameter.
      parameters:
      - name: id
        in: path
        description: ID of the Bourreau to get information on.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: |
            A Bourreau object with information about the status
            of the execution server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bourreau'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bourreau'
        "401":
          description: No session created yet.
          content: {}
  /data_providers:
    get:
      tags:
      - DataProviders
      summary: Get a list of the Data Providers available to the current user.
      description: |
        This method returns a list of Data Provider objects that represent
        servers with disk space accessible for storing Userfiles.
      parameters:
      - name: page
        in: query
        description: Page number when paginating. See also the per_page parameter
        schema:
          type: integer
      - name: per_page
        in: query
        description: Size of each page when paginating. See also the page parameter
        schema:
          type: integer
      responses:
        "200":
          description: |
            An array of Data Provider objects describing servers that store data.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataProvider'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataProvider'
        "401":
          description: No session created yet.
          content: {}
  /data_providers/{id}:
    get:
      tags:
      - DataProviders
      summary: Get information on a particular Data Provider.
      description: |
        This method returns a single Data Provider specified by the ID parameter
      parameters:
      - name: id
        in: path
        description: ID of the Data Provider to get information on.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: |
            A Data Provider object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataProvider'
            application/xml:
              schema:
                $ref: '#/components/schemas/DataProvider'
        "401":
          description: No session created yet.
          content: {}
    delete:
      tags:
      - DataProviders
      summary: Delete a Data Provider.
      description: |
        This method allows the deletion of a Data Provider. This will not delete
        the files on the Data Provider, but will remove the Data Provider from
        CBRAIN.
      parameters:
      - name: id
        in: path
        description: ID of the Data Provider to delete.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Data Provider was deleted.
          content: {}
        "409":
          description: Data Provider cannot be deleted.
          content: {}
  /data_providers/{id}/browse:
    get:
      tags:
      - DataProviders
      summary: List the files on a Data Provider.
      description: |
        This method allows the inspection of what files are present on a Data Provider specified by the ID parameter. Files that are not yet registered as Userfiles are visible using this method, as well as regularly accessible Userfiles.
      parameters:
      - name: id
        in: path
        description: The ID of the Data Provider to browse.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: |
            A list of files present in the Data Provider, with their associated
            registration status, FileType, and other information.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileInfo'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileInfo'
        "401":
          description: No session created yet.
          content: {}
        "403":
          description: Data Provider is not browsable.
          content: {}
  /data_providers/{id}/register:
    post:
      tags:
      - DataProviders
      summary: Registers a file as a Userfile in CBRAIN.
      description: |
        This method allows new files to be added to CBRAIN. The files must first
        be transfered to the Data Provider via SFTP. For more information on
        SFTP file transfers, consult the CBRAIN Wiki documentation. Once files
        are present on the Data Provider, this method registers them in CBRAIN
        by specifying the file type. You can also specify to copy/move the files
        to another Data Provider after file registration.
      parameters:
      - name: id
        in: path
        description: The ID of the Data Provider to register files on.
        required: true
        schema:
          type: integer
      requestBody:
        description: Arrays containing the filenames and types to register.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiRegistrationModReq'
        required: true
      responses:
        "200":
          description: Files were successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/RegistrationInfo'
        "401":
          description: No session created yet.
          content: {}
        "403":
          description: The current user does not have access to register files.
          content: {}
      x-codegen-request-body-name: multi_registration_mod_req
  /data_providers/{id}/unregister:
    post:
      tags:
      - DataProviders
      summary: Unregisters files as Userfile in CBRAIN.
      description: |
        This method allows files to be unregistered from CBRAIN. This will not
        delete the files, but removes them from the CBRAIN database, so Tools
        may no longer be run on them.
      parameters:
      - name: id
        in: path
        description: The ID of the Data Provider to unregister files from.
        required: true
        schema:
          type: integer
      requestBody:
        description: Arrays containing the filenames to unregister.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiRegistrationModReq'
        required: true
      responses:
        "200":
          description: |
            Files were successfully unregistered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/RegistrationInfo'
        "401":
          description: No session created yet.
          content: {}
        "403":
          description: The current user does not have access to unregister files.
          content: {}
      x-codegen-request-body-name: multi_registration_mod_req
  /data_providers/{id}/delete:
    post:
      tags:
      - DataProviders
      summary: Deletes unregistered files from a CBRAIN Data provider.
      description: |
        This method allows files that have not been registered from CBRAIN to be
        deleted. This may be necessary if files were uploaded in error, or if
        they were unregistered but not immediately deleted.
      parameters:
      - name: id
        in: path
        description: The ID of the Data Provider to delete files from.
        required: true
        schema:
          type: integer
      requestBody:
        description: Arrays containing the files to delete.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiRegistrationModReq'
        required: true
      responses:
        "200":
          description: Successfully launched the operation in the background to delete
            files.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/RegistrationInfo'
        "401":
          description: No session created yet.
          content: {}
        "403":
          description: You cannot delete files from this provider.
          content: {}
      x-codegen-request-body-name: multi_registration_mod_req
  /data_providers/{id}/is_alive:
    get:
      tags:
      - DataProviders
      summary: Pings a Data Provider to check if it is running.
      description: |
        This method allows the querying of a Data Provider specified by the ID
        parameter to see if it is running or not.
      parameters:
      - name: id
        in: path
        description: The ID of the Data Provider to query.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Returns "true" or "false".
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
  /groups:
    get:
      tags:
      - Groups
      summary: Get a list of the Groups (projects) available to the current user.
      description: |
        This method returns a list of all of the groups that the current user has access to.
      parameters:
      - name: page
        in: query
        description: Page number when paginating. See also the per_page parameter
        schema:
          type: integer
      - name: per_page
        in: query
        description: Size of each page when paginating. See also the page parameter
        schema:
          type: integer
      responses:
        "200":
          description: |
            A list of Group objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        "401":
          description: No session created yet.
          content: {}
    post:
      tags:
      - Groups
      summary: Creates a new Group.
      description: |
        This method creates a new Group, which allows users to organize their files and tasks.
      requestBody:
        description: An object describing the group to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GroupModReq'
        required: true
      responses:
        "201":
          description: Successfully created Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
            application/xml:
              schema:
                $ref: '#/components/schemas/Group'
        "401":
          description: No session created yet.
          content: {}
      x-codegen-request-body-name: group_mod_req
  /groups/{id}:
    get:
      tags:
      - Groups
      summary: Get information on a Group (project).
      description: |
        This method returns information on a single Group (project), specified
        by the ID parameter. Information returned includes the list of Users
        who are members of the group, the ID of the Site the Group is part of,
        and whether or not the group is visible to Regular Users.
      parameters:
      - name: id
        in: path
        description: ID of the Group to get information on.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: |
            Successfully retrieved information on the Group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
            application/xml:
              schema:
                $ref: '#/components/schemas/Group'
        "401":
          description: No Session created yet.
          content: {}
    put:
      tags:
      - Groups
      summary: Update the properties of a Group (project).
      description: |
        This method allows the properties of a Group (project) to be updated.
        This includes the User membership, the ID of the site the Group belongs
        to, and the visibility status of the group to Regular Users.
      parameters:
      - name: id
        in: path
        description: ID of the Group
        required: true
        schema:
          type: integer
      requestBody:
        description: An object with the group information to update
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupModReq'
        required: true
      responses:
        "200":
          description: Group updated successfully.
          content: {}
        "401":
          description: No session created yet.
          content: {}
        "403":
          description: Current user is forbidden from editing this group.
          content: {}
      x-codegen-request-body-name: group_mod_req
    delete:
      tags:
      - Groups
      summary: Deletes a Group (project).
      description: |
        This method allows the removal of Groups (projects) that are no longer
        necessary. Groups that have Userfiles associated with them may not be
        deleted.
      parameters:
      - name: id
        in: path
        description: ID of the Group to delete.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Successfully deleted the Group (project).
          content: {}
        "401":
          description: No Session created yet.
          content: {}
  /userfiles:
    get:
      tags:
      - Userfiles
      summary: List of the Userfiles accessible to the current user.
      description: |
        This method returns a list of Userfiles that are available to the current User.
      parameters:
      - name: page
        in: query
        description: Page number when paginating. See also the per_page parameter
        schema:
          type: integer
      - name: per_page
        in: query
        description: Size of each page when paginating. See also the page parameter
        schema:
          type: integer
      responses:
        "200":
          description: List of accessible Userfiles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Userfile'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Userfile'
        "401":
          description: No Session created yet.
          content: {}
    post:
      tags:
      - Userfiles
      summary: Creates a new Userfile and upload its content.
      description: |
        This method creates a new Userfile in CBRAIN, with the current user
        as the owner of the file.
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - data_provider_id
              - file_type
              - upload_file
              - "userfile[group_id]"
              type: object
              properties:
                upload_file:
                  type: string
                  description: File content to upload to CBRAIN
                  format: binary
                data_provider_id:
                  type: integer
                  description: The ID of the Data Provider to upload the file to.
                  format: int32
                userfile[group_id]:
                  type: integer
                  description: ID of the group that will have access to the Userfile
                  format: int32
                file_type:
                  type: string
                  description: The type of the file
                  default: SingleFile
                _do_extract:
                  type: string
                  description: set to the string 'on' to indicate that the uploaded
                    content is a tar.gz or .zip archive that need to be extracted.
                    See also the parameter _up_ex_mode
                _up_ex_mode:
                  type: string
                  description: "if '_do_extract' is set to 'on', set this to 'collection'\
                    \ to create a single collection, or 'multiple' to create one file\
                    \ per entry in the uploaded content"
        required: true
      responses:
        "201":
          description: Userfile successfully created.
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
        "401":
          description: No Session created yet.
          content: {}
  /userfiles/{id}:
    get:
      tags:
      - Userfiles
      summary: Get information on a Userfile.
      description: |
        This method returns information about a single Userfile, specified by
        its ID. Information returned includes the ID of the owner, the Group
        (project) it is a part of, a description, information about where the
        acutal copy of the file currently is, and what the status is of any
        synhronization operations that may have been requested.
      parameters:
      - name: id
        in: path
        description: The ID number of the Userfile to get information on.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Returns the information about the Userfile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userfile'
            application/xml:
              schema:
                $ref: '#/components/schemas/Userfile'
    put:
      tags:
      - Userfiles
      summary: Update information on a Userfile.
      description: |
        This method allows a User to update information on a userfile.
      parameters:
      - name: id
        in: path
        description: The ID number of the Userfile to update.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserfileModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserfileModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserfileModReq'
        required: true
      responses:
        "200":
          description: Userfile updated successfully.
          content: {}
        "401":
          description: No session created yet.
          content: {}
      x-codegen-request-body-name: userfile_mod_req
  /userfiles/{id}/content:
    get:
      tags:
      - Userfiles
      summary: Get the content of a Userfile
      description: This method allows you to download the content of a userfile.
      parameters:
      - name: id
        in: path
        description: The ID number of the Userfile to download
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: The contents of the file
          content:
            application/*:
              schema:
                type: string
                format: binary
            text/*:
              schema:
                type: string
                format: binary
        "403":
          description: Forbidden
          content: {}
  /userfiles/download:
    post:
      tags:
      - Userfiles
      summary: Download several files
      description: This method compresses several Userfiles in .gz format and prepares
        them to be downloaded.
      requestBody:
        description: "The IDs of the files to be downloaded. If more than one file\
          \ is specified, they will be zipped into a gzip archive."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
        required: true
      responses:
        "200":
          description: Indicates that the files are being compressed and downloaded.
          content:
            application/*:
              schema:
                type: string
                format: binary
            text/*:
              schema:
                type: string
                format: binary
        "403":
          description: Forbidden
          content: {}
      x-codegen-request-body-name: multi_userfile_mod_req
  /userfiles/delete_files:
    post:
      tags:
      - Userfiles
      summary: Delete several files that have been registered as Userfiles
      requestBody:
        description: The IDs of the files to destroy.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
        required: true
      responses:
        "200":
          description: Indicates that the files are being deleted.
          content: {}
      x-codegen-request-body-name: multi_userfile_mod_req
  /userfiles/change_provider:
    post:
      tags:
      - Userfiles
      summary: Moves the Userfiles from their current Data Provider to a new one.
      requestBody:
        description: The IDs of the files to move.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
        required: true
      responses:
        "200":
          description: Indicates that the files are being moved or copied in the background.
          content: {}
      x-codegen-request-body-name: multi_userfile_mod_req
  /userfiles/compress:
    post:
      tags:
      - Userfiles
      summary: Compresses many Userfiles each into their own GZIP archive.
      requestBody:
        description: The IDs of the files to compress.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
        required: true
      responses:
        "200":
          description: Indicates that the compression is starting in the background.
          content: {}
      x-codegen-request-body-name: multi_userfile_mod_req
  /userfiles/uncompress:
    post:
      tags:
      - Userfiles
      summary: Uncompresses many Userfiles.
      requestBody:
        description: The IDs of the files to uncompress.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
        required: true
      responses:
        "200":
          description: Indicates that files are being uncompressed in the background.
          content: {}
      x-codegen-request-body-name: multi_userfile_mod_req
  /userfiles/sync_multiple:
    post:
      tags:
      - Userfiles
      summary: Syncs Userfiles to the local Data Providers cache.
      description: "Synchronizing files to their the local cache allows you to download,\
        \ visualize and do processing on them that is not available if not synced.\
        \ CBRAIN operations will sync files automatically, and this is only necessary\
        \ if a file is changed on its host Data Provdier by an external process."
      requestBody:
        description: The IDs of the files to synchronize.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultiUserfilesModReq'
        required: true
      responses:
        "200":
          description: Indicates that synchronization is starting in the background
          content: {}
      x-codegen-request-body-name: multi_userfile_mod_req
  /tasks:
    get:
      tags:
      - Tasks
      summary: Get the list of Tasks.
      description: |
        This method returns the list of Tasks accessible to the current user.
      parameters:
      - name: page
        in: query
        description: Page number when paginating. See also the per_page parameter
        schema:
          type: integer
      - name: per_page
        in: query
        description: Size of each page when paginating. See also the page parameter
        schema:
          type: integer
      responses:
        "200":
          description: List of all accessible Tasks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CbrainTask'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CbrainTask'
        "401":
          description: No Session created yet.
          content: {}
    post:
      tags:
      - Tasks
      summary: Create a new Task.
      description: |
        This method allows the creation of a new Task.
      requestBody:
        description: The task to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CbrainTaskModReq'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CbrainTaskModReq'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CbrainTaskModReq'
        required: true
      responses:
        "200":
          description: Task created successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CbrainTask'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CbrainTask'
        "401":
          description: No Session created yet.
          content: {}
      x-codegen-request-body-name: cbrain_task
  /tasks/{id}:
    get:
      tags:
      - Tasks
      summary: Get information on a Task.
      description: |
        This method returns information on a Task, including its status,
        Task restartability and information on where the results are kept.
      parameters:
      - name: id
        in: path
        description: The ID number of the Task to delete.
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Information about a Task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CbrainTask'
            application/xml:
              schema:
                $ref: '#/components/schemas/CbrainTask'
        "401":
          description: No Session created yet.
          content: {}
  /tools:
    get:
      tags:
      - Tools
      summary: Get the list of Tools.
      description: |
        This method returns a list of all of the Tools that exist in CBRAIN.
        Tools encapsulate a scientific program designed to extract information
        from an input Userfile.
      parameters:
      - name: page
        in: query
        description: Page number when paginating. See also the per_page parameter
        schema:
          type: integer
      - name: per_page
        in: query
        description: Size of each page when paginating. See also the page parameter
        schema:
          type: integer
      responses:
        "200":
          description: List of Tools.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tool'
        "401":
          description: No Session created yet.
          content: {}
components:
  schemas:
    SessionInfo:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
        cbrain_api_token:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique numerical ID for the user.
          format: int64
        login:
          type: string
          description: UNIX-style username.
        password:
          type: string
          description: Password field
          format: password
        password_confirmation:
          type: string
          description: Password field (generally same as 'password')
          format: password
        full_name:
          type: string
          description: Full name of the user.
        email:
          type: string
          description: email address of the user.
        city:
          type: string
          description: city where the user is located
        country:
          type: string
          description: country where the user is located
        time_zone:
          type: string
          description: time-zone (should make it this an enum)
        type:
          type: string
          description: Classification of user permission level
          default: NormalUser
        site_id:
          type: integer
          description: ID of the site affiliation for the user.
          format: int64
        last_connected_at:
          type: string
          description: time of last connection by the user. (can be empty)
          format: dateTime
        account_locked:
          type: string
          description: Whether or not the account is locked.
          format: boolean
    ToolConfig:
      type: object
      properties:
        id:
          type: integer
          description: Unique numerical ID for the ToolConfig.
          format: int64
        version_name:
          type: string
          description: the version name of the configuration
        description:
          type: string
          description: a description of the configuration
        tool_id:
          type: integer
          description: the ID of the tool associated with this configuration
          format: int64
        bourreau_id:
          type: integer
          description: |
            The ID of the execution server where this tool
            configuration is available.
          format: int64
        group_id:
          type: integer
          description: the ID of the project controlling access to this ToolConfig
          format: int64
        ncpus:
          type: integer
          description: |
            A hint at how many CPUs the CBRAIN task will allocate
            to run this tool configuration
          format: int32
    Tag:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the tag
          format: int64
        name:
          type: string
          description: |
            Name of the tag. This holds all the information about what the tag is supposed to indicate about your files.
        user_id:
          type: integer
          description: |
            The ID of the user that the tag belongs to.
          format: int64
        group_id:
          type: integer
          description: |
            The ID of the group that the tag belongs to.
          format: int64
    Bourreau:
      type: object
      properties:
        id:
          type: integer
          description: Unique numerical ID for the bourreau.
          format: int64
        name:
          type: string
          description: Name given by the creator to the bourreau.
        user_id:
          type: integer
          description: ID of the creator of the bourreau.
          format: int64
        group_id:
          type: integer
          description: ID of the group allowed to use the bourreau.
          format: int64
        online:
          type: string
          description: online
          format: boolean
        read_only:
          type: string
          description: Specifies whether the bourreau is read-only or can be modified.
          format: boolean
        description:
          type: string
          description: Description of the bourreau.
    DataProvider:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID for the Data Provider.
          format: int64
        name:
          type: string
          description: Name of the Data Provider.
        type:
          type: string
          description: "Type of Data Provider, which usually indicates whether it\
            \ is a local Data Provider, has a flat internal directory structure, or\
            \ is meant for file uploading to CBRAIN."
        user_id:
          type: integer
          description: Creator and owner of the Data Provider.
          format: int64
        group_id:
          type: integer
          description: ID of the group that has access to this Data Provider.
          format: int64
        online:
          type: string
          description: Boolean variable that indicates whether the system hosting
            the Data Provider is accessible.
          format: boolean
        read_only:
          type: string
          description: Boolean variable that indicates whether the Data Provider can
            be written to.
          format: boolean
        description:
          type: string
          description: Description of the Data Provider.
        is_browsable:
          type: string
          format: boolean
        is_fast_syncing:
          type: string
          format: boolean
        allow_file_owner_change:
          type: string
          format: boolean
        content_storage_shared_between_users:
          type: string
          format: boolean
    Group:
      type: object
      properties:
        id:
          type: integer
          description: ID number of the group.
          format: int64
        name:
          type: string
          description: Name of the group.
        description:
          type: string
          description: Description of the group.
        type:
          type: string
          description: Type of group.
        site_id:
          type: integer
          description: ID of the site associated with the group.
          format: int64
        creator_id:
          type: integer
          description: |
            ID of the User who created the group.
          format: int64
        invisible:
          type: boolean
          description: |
            Specifies whether or not the group is visible to Normal Users.
            Invisible groups exist to specify levels of access to Userfiles,
            DataProviders and Bourreaux.
    Userfile:
      type: object
      properties:
        id:
          type: integer
          description: ID number of the file.
          format: int64
        name:
          type: string
          description: Name of the file that the Userfile represents
        size:
          type: integer
          description: Number of bytes used to store the file.
          format: int64
        user_id:
          type: integer
          description: ID of the owner of the file.
          format: int64
        parent_id:
          type: integer
          description: "ID of the parent Userfile, if any exists, or null otherwise."
          format: int64
        type:
          type: string
          description: "Type of the file. This is important in determining what tools\
            \ can be run on the file. The most generic file types, are the Single\
            \ File, which represents one file, and the File Collection, which represents\
            \ a directory full of files."
        group_id:
          type: integer
          description: "ID of the group that owns the file, which determines its visibility\
            \ status."
          format: int64
        data_provider_id:
          type: integer
          description: "ID of the Data Provider that is hosting the persistent copy\
            \ of the file. It may exist in caches across the systems that make up\
            \ CBRAIN, as copies of the file are made in order to run scientific programs\
            \ on them on remote systems."
          format: int64
        group_writable:
          type: string
          description: Boolean variable that specifies whether members of the owner
            group have access to modify or overwrite the file.
          format: boolean
        num_files:
          type: integer
          description: "Number of files that the Userfiles represents. For Single\
            \ Files, this is always 1."
          format: int64
        hidden:
          type: string
          description: Boolean variable that specifies whether this file is hidden
            or not in the user interface.
          format: boolean
        immutable:
          type: string
          description: Boolean variable that specifies whether any user can modify
            the contents of the file.
          format: boolean
        archived:
          type: string
          description: "Boolean variable that specifies whether the file is available,\
            \ uncompressed, or has been archived."
          format: boolean
        description:
          type: string
          description: Description of the file.
    CbrainTask:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the Task.
          format: int64
        type:
          type: string
          description: The task type
        user_id:
          type: integer
          description: ID of the User who created the Task.
          format: int64
        group_id:
          type: integer
          description: ID of the group that this task is being run in.
          format: int64
        bourreau_id:
          type: integer
          description: ID of the Bourreau the Task was launched on.
          format: int64
        tool_config_id:
          type: integer
          description: ID number that specifies which Tool Config to use. The Tool
            Config specifies environment variables and other system-specific scripts
            necessary for the Task to be run in the target environment.
          format: int64
        batch_id:
          type: integer
          description: "ID of the batch this task was launched as part of. Batches\
            \ of tasks consist of the same task, with the same parameters, being run\
            \ on many different input files."
          format: int64
        params:
          type: object
          properties: {}
          description: Parameters used as inputs to the scientific calculation associated
            with the task.
        status:
          type: string
          description: Current status of the task.
        created_at:
          type: string
          description: Date created.
          format: dateTime
        updated_at:
          type: string
          description: Last updated.
          format: dateTime
        run_number:
          type: integer
          description: The number of times that this task was run.
          format: int64
        results_data_provider_id:
          type: integer
          description: ID of the Data Provider that contains the Userfile that represents
            the results of the task.
          format: int64
        cluster_workdir_size:
          type: integer
          description: size of workdirectory
          format: int64
        workdir_archived:
          type: string
          description: Boolean variable that indicates whether the working directory
            of the task is available on the processing server or has been archived
            and is no longer accessible.
          format: boolean
        workdir_archive_userfile_id:
          type: integer
          description: "ID of the userfile created as part of the archival process,\
            \ if the working directory of the task has been archived."
          format: int64
        description:
          type: string
          description: Description of the Task.
    Tool:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the Tool.
          format: int64
        name:
          type: string
          description: Name of the Tool.
        user_id:
          type: integer
          description: Creator of the Tool.
          format: int64
        group_id:
          type: integer
          description: Group that has access to the Tool.
          format: int64
        category:
          type: string
          description: Category of the Tool
        cbrain_task_class_name:
          type: string
          description: The name of the Task class that will be created when jobs are
            launched using the Tool.
        select_menu_text:
          type: string
          description: Text that appears for Tool selection.
        description:
          type: string
          description: Description of the Tool.
        url:
          type: string
          description: URL of the website that describes the Tool and possibly has
            code for the Tool.
    RegistrationInfo:
      type: object
      properties:
        notice:
          type: string
        error:
          type: string
        newly_registered_userfiles:
          type: array
          items:
            $ref: '#/components/schemas/Userfile'
        previously_registered_userfiles:
          type: array
          items:
            $ref: '#/components/schemas/Userfile'
        userfiles_in_transit:
          type: array
          items:
            $ref: '#/components/schemas/Userfile'
        num_unregistered:
          type: integer
          format: int64
        num_erased:
          type: integer
          format: int64
    FileInfo:
      type: object
      properties:
        userfile_id:
          type: integer
          description: id of the userfile
          format: int64
        name:
          type: string
          description: the base filename
        group:
          type: string
          description: "string representation of gid, the name of the group"
        gid:
          type: integer
          description: numeric group id of the file
          format: int64
        owner:
          type: string
          description: "string representation of uid, the name of the owner"
        uid:
          type: integer
          description: numeric uid of owner
          format: int64
        permissions:
          type: integer
          description: "an int interpreted in octal, e.g. 0640"
          format: int64
        size:
          type: integer
          description: size of file in bytes
          format: int64
        state_ok:
          type: boolean
          description: flag that tell whether or not it is OK to register/unregister
        message:
          type: string
          description: a message to give more information about the state_ok flag
        symbolic_type:
          type: string
          description: "one of :regular, :symlink, :directory"
        atime:
          type: integer
          description: "access time (an int, since Epoch)"
        mtime:
          type: integer
          description: "modification time (an int, since Epoch)"
    UserModReq:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        no_password_reset_needed:
          type: integer
          description: "For new user accounts, the user must reset the password at\
            \ first login"
        force_password_reset:
          type: boolean
          description: "For existing accounts, boolean to force a password change"
    TagModReq:
      type: object
      properties:
        tag:
          $ref: '#/components/schemas/Tag'
    DataProviderModReq:
      type: object
      properties:
        data_provider:
          $ref: '#/components/schemas/DataProvider'
    GroupModReq:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/Group'
    UserfileModReq:
      type: object
      properties:
        userfile:
          $ref: '#/components/schemas/Userfile'
    CbrainTaskModReq:
      type: object
      properties:
        cbrain_task:
          $ref: '#/components/schemas/CbrainTask'
    MultiUserfilesModReq:
      type: object
      properties:
        file_ids:
          type: array
          items:
            type: string
        data_provider_id_for_mv_cp:
          type: integer
        specified_filename:
          type: string
          description: The name of the archive file that the Userfiles will be compressed
            into when downloading.
        operation:
          type: string
          description: Used when affecting the synchronization status of files. Either
            "sync_local" or "all_newer". "sync_local" will ensure that the version
            of the file in the CBRAIN portal cache is the most recent version that
            exists on the Data Provider. "all_newer" will ensure that ALL caches known
            to CBRAIN are updated with the most recent version of the files in the
            host Data Provider.
    MultiRegistrationModReq:
      type: object
      properties:
        basenames:
          type: array
          items:
            type: string
        filetypes:
          type: array
          description: "An array containing the filetypes associated with the files\
            \ to register; each element must be a string containing the cbrain file\
            \ type, a single dash, and then a repeat of the basename found in the\
            \ basenames parameters. For example, \"TextFile-abc.txt\""
          items:
            type: string
        as_user_id:
          type: integer
          description: The ID of the user to register files as.
        browse_path:
          type: string
          description: A relative path such as "abcd/efgh" that can be provided when
            registering basenames deeper under the root of the DataProvider. This
            parameter only works for DataProvider types that have a 'multi-level'
            capability. Otherwise the string is ignored. The relative path will be
            used for all basenames in the current request.
        other_group_id:
          type: integer
          description: The ID of the project controlling access to the registered
            files.
          format: int64
        delete:
          type: boolean
          description: Specifies to delete the file contents. This is only used during
            an "unregister" action.
          default: false
  securitySchemes:
    BrainPortalSession:
      type: apiKey
      name: cbrain_api_token
      in: query
x-original-swagger-version: "2.0"
