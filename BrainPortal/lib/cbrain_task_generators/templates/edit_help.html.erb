
<!--
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-->

<!--
# NOTE: This is a working template generated from a descriptor:
# [Schema]         <%= schema['id'] %>
# [Schema version] <%= descriptor['schema-version'] %>
# [Tool]           <%= descriptor['name'] %>
# [Version]        <%= descriptor['tool-version'] || '?' %>
# See the CbrainTask Programmer Guide (CBRAIN Wiki) for a more complete picture
# of how CbrainTasks are constructed.
-->
<%-
# NOTE: This template's weird indentation is there to try and make the
# generated code as legible as possible.
-%>

<%-
  # Parameter groups
  params  = descriptor['inputs'].select { |i| i['type'] != 'File' }
  inputs  = descriptor['inputs'].select { |i| i['type'] == 'File' }
  outputs = descriptor['output-files'].dup
-%>
<%# Format a parameter (+param+) attributes as a list element (<li>) -%>
<%- format_param = lambda do |param| -%>
  <li>
    <strong>
      <%= param['name'] %>
  <%- if param['command-line-flag']-%>
      (<code class="cmd-flag"><%= param['command-line-flag'] %></code>)
  <%- end -%>
  <%- if param['description'] -%>
    </strong>:
    <%= param['description'].split("\n").map { |s| h(s) }.join("<br>").html_safe  %>
  <%- else -%>
    </strong>
  <%- end -%>
  </li>
<%- end -%>
<h1>
  <%= descriptor['name'] %>
<%- if descriptor['tool-version'] -%>
  <%= descriptor['tool-version'] %>
<%- end -%>
</h1>
<br />

<%- if descriptor['description'] -%>
<%= descriptor['description'] %>
<br />

<%- end -%>
<%- unless params.empty? -%>
<h2>Parameters</h2>
<ul>
  <%- params.each { |param| format_param.(param) } -%>
</ul>

<%- end -%>
<%- unless inputs.empty? -%>
<h2>Input files</h2>
<ul>
  <%- inputs.each { |input| format_param.(input) } -%>
</ul>

<%- end -%>
<%- unless outputs.empty? -%>
<h2>Output files</h2>
<ul>
  <%- outputs.each { |output| format_param.(output) } -%>
</ul>
<%- end -%>

<%- unless inputs.empty? -%>
<h2>Launching Multiple Tasks</h2>
<%- single_file = (inputs.length == 1) && (inputs.first['optional'] == false) rescue false -%>
<%- if single_file -%>
<p>
  Because <%= descriptor['name'] %> has only a single, required file input, all files checked in Cbrain when the task was launched will be placed in this input.
  A task will then be launched for each file input this way, with the other parameters remaining constant across the tasks.
</p>
<%- end -%>
<p>
  Multiple instances of <%= descriptor['name'] %> can <%= "also" if single_file %> be launched simultaneously using the <em>Cbrain filelist</em> mechanism ("cbcsv" files).
  Essentially, a cbcsv file is a csv file with a list of a user's files registered in Cbrain.
  <%- if single_file -%>
  Note that if one or more cbcsv files are automatically input to a file parameter (i.e. when there is only a single file input),
    each cbcsv will be expanded to its constituent files (i.e. a task will be generated for each row).
  <%- end -%>
</p>
<p>
  A cbcsv file can be created in Cbrain by selecting a set of input files from which one wishes to launch a set of tasks,
    clicking on the "More" button under the "Files" tab, and clicking "Create a file list".
  A cbcsv file will be created and added to your Cbrain fileset, wherein each row represents a file and the first column represents its ID in Cbrain.
  Selecting a cbcsv file for a file-type input parameter to the task will result in one copy of the task being launched for each file in the cbcsv,
    with each task being given a different input file (from each row) for the parameter with the cbcsv (i.e. in its place).
  If multiple cbcsv files in different file inputs are given, they must be the same length, as tasks will be generated by iterating over the rows of <em>all</em> the input cbcsv files simultaneously.
    Should one wish to launch all combinations of input file parameters among several lists, the cbcsv files must be constructed explicitly for this.
  It is also possible to download, manipulate, and re-upload a cbcsv file (e.g. if one has local ordered lists of files for a specific task already).
</p>
<p>
  Note that rows with IDs of 0 (zero) in the first column are treated as "null" inputs, and no value will be given to the task for that row under that parameter
    (this is useful if one wishes to have no input given to a certain parameter for some of the launched tasks).
</p>
<%- end -%>

