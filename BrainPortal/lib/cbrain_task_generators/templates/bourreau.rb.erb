
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# NOTE: This is a working template generated from a descriptor:
# [Schema]         <%= schema['id'] %>
# [Schema version] <%= descriptor['schema-version'] %>
# [Tool]           <%= descriptor['name'] %>
# [Version]        <%= descriptor['tool-version'] || '?' %>
# See the CbrainTask Programmer Guide (CBRAIN Wiki) for a more complete picture
# of how CbrainTasks are constructed.
% # NOTE: This template's weird indentation is there to try and make the
% # generated code as legible as possible.

# Bourreau-side CbrainTask subclass to launch <%= name %>
class CbrainTask::<%= name %> < <%= descriptor['cbrain:inherits-from-class'] || 'ClusterTask' %>

  Revision_info=CbrainFileRevision[__FILE__] #:nodoc:

  # Descriptor-based tasks are, by default, easily restartable and recoverable
  include RestartableTask
  include RecoverableTask

% # Maximum width of a given +key+'s value in a +list+ of hashes
% max_width = lambda do |list, key|
%   list.map { |i| i[key].to_s.length rescue 0 }.max
% end
%
% # Parameter groups
% inputs   = descriptor['inputs'].dup       rescue []
% outputs  = descriptor['output-files'].dup rescue []
% files    = inputs.select  { |i| i['type'] == 'File'   }
% required = outputs.select { |o| ! o['optional']       }
% globs    = outputs.select { |o| o['list']             }
% in_keys  = inputs.select  { |i| i['command-line-key'] }
% out_keys = outputs.select { |o| o['command-line-key'] }
% flags    = (inputs + outputs).select { |p| p['command-line-flag'] }
% seps     = inputs.select { |i| i['command-line-flag-separator'] }
% eVars    = descriptor['environment-variables'].dup rescue []
%
  # Task properties are special boolean properties of your task, returned as a
  # hash table. Used internally by CBRAIN to enable/disable special task
  # handling. All properties are unset (false) by default.
  #
  # Both generated task classes (ClusterTask for the Bourreau, PortalTask for
  # the Portal) have different properties as they have different use cases.
  # The properties below are for the Bourreau-side class (ClusterTask).
  def self.properties #:nodoc:
    super.merge({
      # The can_submit_new_tasks property allows a task to submit new tasks.
      # To submit a new task, a task has to create a JSON file called
      # new-task-*.json at the root of its working directory. Here is an
      # example of JSON content for this file:
      # {
      #   "tool-class": "CbrainTask::TestTool",
      #   "description": "A task running TestTool",
      #   "parameters": {
      #     "important_number": "123",
      #     "dummy_paramet4er": "432"
      #    }
      # }
      # The corresponding JSON schema is maintained in the validate_json_string
      # method validate_json_string of the BourreauWorker class.
      :can_submit_new_tasks => <%= !!descriptor['cbrain:can-submit-new-tasks'] %>,
    })
  end

  # Setup the cluster's environment to execute <%= name %>; create the relevant
  # directories, prepare symlinks to input files, set environment variables,
  # etc. Returns true if the task was correctly set up.
  def setup #:nodoc:
% unless files.empty?
    params = self.params

    # An error occured. Log +message+ and return false immediately.
    retn  = Proc.new { |r| return r }
    error = lambda do |message|
      self.addlog(message)
      retn.(false)
    end

    # Set results data provider if missing via file inputs
    # Check that the file can be resolved as well
    isFile = lambda { |p| [<%= files.map { |f| ":'#{f['id']}'" }.join(',') %>].include?(p) }
    params.each do |k,v|
      if isFile.(k)
        ( v.is_a?(Enumerable) ? v : [v] ).each do |t|
          f = Userfile.find_by_id(t)
          cb_error("Unable to resolve file (id: #{k}, input: #{t})") unless f
          self.results_data_provider_id ||= f.data_provider_id rescue nil
        end
      end
    end

    # And make them all available to <%= name %>
%   make_available = format_call('make_available', files) { |file| [
%     "params[:'#{file['id']}']",
%     "'.'"
%   ] }
%   files.each do |file|
    <%= make_available.(file) %>
%   end

% end
    true
  end

  # The set of shell commands to run on the cluster to execute <%= name %>.
  # Any output on stdout or stderr will be captured and logged for information
  # or debugging purposes.
  # Note that this function also generates the list of output filenames
  # in params.
  def cluster_commands #:nodoc:

    # Environment variables from Boutiques descriptor
% if eVars.empty?
    envVars = []
% else
    envVars = [
%    eVars.each do |v|
%# The value is escaped for bash; the whole cmd is then escaped to be written into the ruby code
      <%= ("export %s=%s" % [v['name'], v['value'].bash_escape(always_quote=true)]).inspect %>,
%    end
    ]
% end

% if in_keys.empty? && out_keys.empty?
%   unless outputs.empty?
    # Output filenames
    self.params.merge!({
%     id_width = max_width.(outputs, 'id') + ":''".length
%     outputs.each do |output|
      <%=
        "%-#{id_width}s => %s" % [
          ":'#{output['id']}'",
          "'#{output['path-template']}',"
        ]
      %>
%     end
    })

%   end
%   if descriptor['cbrain:ignore-exit-status']
    # Command-line
    envVars + [ <<-'CMD' ]
%   else
    # Command-line to run <%= name %> and save its exit status
    envVars + [ <<-'CMD', "echo $? > ./#{exit_cluster_filename.bash_escape}" ]
%   end
      <%= descriptor['command-line'] %>
    CMD
% else
    params = self.params

    # <%= name %>'s command line and output file names is constructed from a
    # set of key-value pairs (keys) which are substituted in the command line
    # and output templates. For example, if we have { '[1]' => '5' } for keys,
    # a command line such as "foo [1] -e [1]" would turn into "foo 5 -e 5".

%   unless in_keys.empty?
    # Substitution keys for input parameters
    keys = {
%     key_width = max_width.(in_keys, 'command-line-key') + "'".length
%     in_keys.each do |key|
      <%=
        "'%-#{key_width}s => params[:'%s']," % [
          key['command-line-key'] + "'",
          key['id']
        ]
      %>
%     end
    }

%   end
%   unless out_keys.empty?
    # Substitution keys for output files
%     if in_keys.empty?
    keys = {
%     else
    keys.merge!({
%     end
%
%     key_width  = max_width.(out_keys, 'command-line-key') + "''".length
%     path_width = max_width.(out_keys, 'path-template')    + "'',".length
%     out_keys.each do |key|
%       stripped = key['path-template-stripped-extensions']
      <%=
        "%-#{key_width}s => apply_template(%-#{path_width}s keys%s" % [
          "'#{key['command-line-key']}'",
          "'#{key['path-template']}',",
          stripped ? ', strip: [' : '),'
        ]
      %>
%       if stripped
%         stripped.each do |ext|
        '<%= ext %>',
%         end
      ]),
%       end
%     end
    })
%   end

%   unless flags.empty?
    # Input/output command-line flags used with keys in command-line
    # substitution.
    flags = {
%     key_width = max_width.(flags, 'command-line-key')  + "''".length
%     flags.each do |flag|
      <%=
        "%-#{key_width}s => %s" % [
          "'#{flag['command-line-key']}'",
          "'#{flag['command-line-flag']}',"
        ]
      %>
%     end
    }
%   end

%   unless seps.empty?
    # Input command-line separators (with flags) used with keys in command-line
    # substitution.
    seps = {
%     key_width = max_width.(seps, 'command-line-key')  + "''".length
%     seps.each do |sep|
      <%=
        "%-#{key_width}s => %s" % [
          "'#{sep['command-line-key']}'",
          "'#{sep['command-line-flag-separator']}',"
        ]
      %>
%     end
    }
%   end


%   unless outputs.empty?
    # Generate output filenames
    params.merge!({
%     id_width   = max_width.(outputs, 'id')          + ":''".length
%     path_width = max_width.(outputs, 'path-template') + "'',".length
%     outputs.each do |output|
      <%=
        "%-#{id_width}s => apply_template(%-#{path_width}s keys)," % [
          ":'#{output['id']}'",
          "'#{output['path-template']}',"
        ]
      %>
%     end
    })

%   end
%   if descriptor['cbrain:ignore-exit-status']
    # Generate the final command-line to run <%= name %>
    envVars + [ apply_template(<<-'CMD', keys<%= flags.empty? ? '' : ', flags: flags' %><%= seps.empty? ? '' : ', separators: seps' %>) ]
      <%= descriptor['command-line'] %>
    CMD
%   else
    # Generate the final command-line to run <%= name %>
    command = apply_template(<<-'CMD', keys<%= flags.empty? ? '' : ', flags: flags' %><%= seps.empty? ? '' : ', separators: seps' %>)
      <%= descriptor['command-line'] %>
    CMD

    # And save its exit status
    envVars + [ command, "echo $? > ./#{exit_cluster_filename.bash_escape}" ]
%   end
% end
  end

  # Called after the task is done, this method ensures <%= name %> succeeded and
  # saves its output files to the Bourreau's cache before registering them into
  # CBRAIN for later retrieval. Returns true on success.
  def save_results #:nodoc:
% unless outputs.empty?
    # No matter how many errors occur, we need to save as many output
    # files as possible and carry the error state to the end.
    params    = self.params
    succeeded = true

% end
% unless descriptor['cbrain:ignore-exit-status']
    # Make sure <%= name %> completed successfully by checking its exit status
    # in +exit_cluster_filename+.
    unless File.exists?(exit_cluster_filename)
      self.addlog("Missing exit status file #{exit_cluster_filename}")
%   if outputs.empty?
      return false
%   else
      succeeded &&= false
%   end
    end

    exit_status = IO.read(exit_cluster_filename).strip.to_i
    unless SystemExit.new(exit_status).success?
      self.addlog("Command failed, exit status #{exit_status}")
%   if outputs.empty?
      return false
%   else
      succeeded &&= false
%   end
    end

% end
    # Additional checks to see if <%= name %> succeeded would belong here.

% if outputs.empty?
    # No output files to save; nothing else to do
    true
% else
    # Extract out the output files parameters from params. They will be re-added
    # once their existence is validated and their registration into CBRAIN is
    # complete.
    outputs = params.extract!(*[
%   outputs.each do |output|
      :'<%= output['id'] %>',
%   end
    ])

%   unless required.empty?
    # Make sure that every required output +path+ actually exists
    # (or that its +glob+ matches something).
    ensure_exists = lambda do |path|
      return if File.exists?(path)
      self.addlog("Missing output file #{path}")
      succeeded &&= false
    end
    ensure_matches = lambda do |glob|
      return unless Dir.glob(glob).empty?
      self.addlog("No output files matching #{glob}")
      succeeded &&= false
    end

%     required.select { |o| ! o['list'] }.each do |output|
    ensure_exists.(outputs[:'<%= output['id'] %>'])
%     end
%     required.select { |o|   o['list'] }.each do |output|
    ensure_matches.(outputs[:'<%= output['id'] %>'])
%     end

%   end
%   unless globs.empty?
    # Expand output file globs/patterns inside outputs for output file lists.
    [
%     globs.each do |output|
      :'<%= output['id'] %>',
%     end
    ].each do |param|
      outputs[param] = Dir.glob(outputs[param])
    end

%   end
    # Helper for checking whether outputs are optional
%   optionalFiles = outputs.select { |o| o['optional'] }
    isOptional = lambda do |f|
      [<%= optionalFiles.map{ |x| ":'"+x['id']+"'" }.join(",") %>].include?(f)
    end

    # Save (and register) all generated files to the results data provider
    outputs.each do |param, paths|
      paths = [paths] unless paths.is_a?(Enumerable)
      paths.each do |path|

        # Print a warning if the file is not present
        # Note that, since the output may be optional, the process may still be successful
        unless path.present? && File.exists?(path)
          self.addlog("Unable to find optional output file: #{path}") if isOptional.(param)
          next
        end

        # Get name and filetype
        self.addlog("Attempting to save result file #{path}")
        name = File.basename(path)
        userfile_class = Userfile.suggested_file_type(name)
        userfile_class ||= ( File.directory?(path) ? FileCollection : SingleFile )

        # If the file already exists, add a tag (task id + ns time) to the name
        if userfile_exists(userfile_class, :name => name)
          tag = '-' + (self.id.to_s || 'unk') + '-' + Time.now.nsec.to_s
          newName = name + tag if name.rindex(".").nil?
          ext = File.extname( name )
          newName ||= name.gsub( /#{ext}\z/, "#{tag + ext}" )
          self.addlog("File with same name found. Renaming to #{newName} before saving.")
          name = newName
        end

        # Save the file (possible overwrite if race condition)
        output = safe_userfile_find_or_new(userfile_class, :name => name)

        unless output.save
          self.addlog("Failed to save file #{path}")
          succeeded &&= false
          next
        end

        output.cache_copy_from_local_file(path)
        params[param] ||= []
        params[param]  << output.id
        self.addlog("Saved result file #{path}")
%   if (single_file = files.first if files.count == 1 && ! files.first['list'])

        # As all output files were generated from a single input file,
        # the outputs can all be made children of the one parent input file.
        parent = params[:'<%= single_file['id'] %>']
        output.move_to_child_of(parent)
        self.addlog_to_userfiles_these_created_these([parent], [output])
%   end
      end
    end

    succeeded
% end
  end

% if descriptor['cbrain:walltime-estimate'] or descriptor['walltime-estimate']
  # Conservative maximal run time estimate for <%= name %> when submitting a
  # job on a cluster. This value should be somewhat larger than the longest
  # expected run without being overly excessive; it will be submitted along
  # with the job to the cluster management system for scheduling purposes.
  def job_walltime_estimate
    (<%= (descriptor['cbrain:walltime-estimate']) ?
          descriptor['cbrain:walltime-estimate'].to_s : descriptor['walltime-estimate'].to_s  %>).seconds
  end

% end
  # Generic helper methods
% unless descriptor['cbrain:ignore-exit-status']

  # Filename used to hold the exit status of <%= name %>, computed similarly
  # to +*_cluster_filename+. This file is generated as soon as the task is
  # completed and is checked in +save_results+ to make sure the task succeeded.
  def exit_cluster_filename
    ".qsub.exit.#{self.name}.#{self.run_id}"
  end
% end

  # Make a given set of userfiles +files+ available to <%= name %> at
  # +directory+. Simple variation on +ClusterTask+::+make_available+
  # to allow +files+ to be an Enumerable of files to make available under
  # +directory+.
  def make_available(files, directory)
    files = [files] unless files.is_a?(Enumerable)
    files.compact.each { |file| super(file, directory + '/') }
  end

  # Apply substitution keys +keys+ to +template+ in order to format a
  # command-line or output file name.
  # Substitute each value in +keys+ in +template+, prepended by the
  # corresponding flag in +flags+ (if available) and stripped of the
  # endings in +strip+:
  #   apply_template('f [1]', { '[1]' => 5 })
  #     => 'f 5'
  #
  #   apply_template('f [1]', { '[1]' => 5 },
  #     flags: { '[1]' => '-z' }
  #   ) => 'f -z 5'
  #
  #   apply_template('f [1]', { '[1]' => '5.z' },
  #     flags: { '[1]' => '-z' },
  #     strip: [ '.z' ]
  #   ) => 'f -z 5'
  def apply_template(template, keys, flags: {}, strip: [], separators: {})
    fileKeys = [<%= files.map { |f| '"' + f['command-line-key'] + '"' }.join(",") %>]
    keys.inject(template) do |template, (key, value)|
      flag = flags[key]
      sep_init = separators[key]

      # Flag type
      isBool = (value.is_a?(TrueClass) || value.is_a?(FalseClass))
      next template.gsub(key, (flag && value==true)  ? flag : '') if flag && isBool

      value = (value.is_a?(Enumerable) ? value.dup : [value])
        .reject(&:nil?)
        .map do |v|

          # Resolve file ids to names
          if fileKeys.include?(key)
            currFile = Userfile.find_by_id(v)
            cb_error("Unable to find given userfile with id #{v}!") unless currFile
            v = currFile.name
          end

          v = v.dup if v.is_a?(String)

          strip.find do |e|
            v.sub!(/#{Regexp.quote(e)}\z/, '')
          end if v.is_a?(String)

          v.to_s.bash_escape
        end
        .join(' ')
      sep = (sep_init.nil?) ? ' ' : sep_init # Default separator is space
      template.gsub(key){ (flag && value.present?) ? "#{flag}#{sep}#{value}" : value }
    end
  end

end
