
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# NOTE: This is a working template generated from a descriptor:
# [Schema]         <%= schema['id'] %>
# [Schema version] <%= descriptor['schema-version'] %>
# [Tool]           <%= descriptor['name'] %>
# [Version]        <%= descriptor['tool-version'] || '?' %>
# See the CbrainTask Programmer Guide (CBRAIN Wiki) for a more complete picture
# of how CbrainTasks are constructed.
% # NOTE: This template's weird indentation is there to try and make the
% # generated code as legible as possible.

# Bourreau-side CbrainTask subclass to launch <%= name %>
class CbrainTask::<%= name %> < <%= (descriptor['custom'] || {})['cbrain:inherits-from-class'] || 'ClusterTask' %>

  Revision_info=CbrainFileRevision["<%= file_version_path %>"] #:nodoc:

  # Descriptor-based tasks are, by default, easily restartable and recoverable
  include RestartableTask
  include RecoverableTask

% # Maximum width of a given +key+'s value in a +list+ of hashes
% max_width = lambda do |list, key|
%   list.map { |i| i[key].to_s.length rescue 0 }.max
% end
%
% # Parameter groups
% inputs     = (descriptor['inputs'].dup                || []) rescue []
% outputs    = (descriptor['output-files'].dup          || []) rescue []
% eVars      = (descriptor['environment-variables'].dup || []) rescue []
%
% # Subsets
% files      = inputs.select  { |i| i['type'] == 'File'   }
% files_list = files.select   { |i| i['list'] }.map{|i| i['id']}
% required   = outputs.select { |o| ! o['optional']       }
% globs      = outputs.select { |o| o['list']             }
% in_keys    = inputs.select  { |i| i['value-key'] }
% out_keys   = outputs.select { |o| o['value-key'] }
% flags      = (inputs + outputs).select { |p| p['command-line-flag'].present? }
% seps       = (inputs + outputs).select { |p| p['command-line-flag-separator'] }
% list_seps  = (inputs + outputs).select { |p| p['list-separator'] }
%
  # Task properties are special boolean properties of your task, returned as a
  # hash table. Used internally by CBRAIN to enable/disable special task
  # handling. All properties are unset (false) by default.
  #
  # Both generated task classes (ClusterTask for the Bourreau, PortalTask for
  # the Portal) have different properties as they have different use cases.
  # The properties below are for the Bourreau-side class (ClusterTask).
  def self.properties #:nodoc:
    super.merge({
      # The can_submit_new_tasks property allows a task to submit new tasks.
      # To submit a new task, a task has to create a JSON file called
      # new-task-*.json at the root of its working directory. Here is an
      # example of JSON content for this file:
      # {
      #   "tool-class": "CbrainTask::TestTool",
      #   "description": "A task running TestTool",
      #   "parameters": {
      #     "important_number": "123",
      #     "dummy_paramet4er": "432"
      #    }
      # }
      # The corresponding JSON schema is maintained in the validate_json_string
      # method validate_json_string of the BourreauWorker class.
      :can_submit_new_tasks => <%= !!(descriptor['custom'] || {})['cbrain:can-submit-new-tasks'] %>,
    })
  end

  # Setup the cluster's environment to execute <%= name %>; create the relevant
  # directories, prepare symlinks to input files, set environment variables,
  # etc. Returns true if the task was correctly set up.
  def setup #:nodoc:

    return false unless super

% unless files.empty?
    params = self.params

    # Set results data provider if missing via file inputs
    # Check that the file can be resolved as well
    isFile     =  lambda { |p| [<%= files.map { |f| ":'#{f['id']}'" }.join(',') %>].include?(p) }
    isFileList =  lambda { |p| [<%= files_list.map { |f| ":'#{f['id']}'" }.join(',') %>].include?(p) }

    files_list = [<%= files_list.map { |f| ":'#{f}'" }.join(',') %>]
    files_list = Hash[files_list.map {|f| [f, true]}]

    params.each do |k,v|
      if isFile.(k)
        ( v.is_a?(Enumerable) ? v : [v] ).each do |t|
          f = Userfile.find_by_id(t)
          cb_error("Unable to resolve file (id: #{k}, input: #{t})") unless f
          self.results_data_provider_id ||= f.data_provider_id rescue nil
        end
      end
    end

    # And make them all available to <%= name %>
%   make_available = format_call('multi_make_available_to_dir', files) { |file| [
%     "params[:'#{file['id']}']",
%     "'.'",
%     "nil",
%     "nil",
%     "#{file['list']}",
%     "'#{file['id']}'",
%   ] }
%#  Special Case: launching docker tasks from a specific directory (i.e. not the original
%#  task directory) breaks the symbolic links generated by make_available. In this case,
%#  we alter the location from which the relative path used by the symlink is computed.
%   containerImage = descriptor['container-image']
%   launchDir = containerImage['working-directory'] rescue nil
%   make_all_available = lambda do |changeBase|
%     baseChanged = lambda { |f| "multi_make_available_to_dir(params[:'#{f['id']}'], '.', nil, \"#{launchDir}\")" }
%     files.each do |file|
      <%= changeBase ? baseChanged.(file) : make_available.(file)   %>
%     end
%   end
%   if launchDir
    # If there is a specified container working directory, but docker is not present,
    # use make_available to symlink the local file to the location of the file in dp_cache_dir.
%#  Note: whether docker is available is not known at templating time, hence the branching
    if self.use_docker?
%     make_all_available.(true)
    # Otherwise, point the symlink to a relative path based off the launch directory
    # specified by the boutiques descriptor
    else
%     make_all_available.(false)
    end
%   else
%#  If no container working directory is specified, simply use make_available directly
%     make_all_available.(false)
%   end

% end
    true
  end

  # If a working directory is specified for use in a container environment,
  # return it; else, return nil.
  def container_working_directory
%   cimg = descriptor['container-image'] || {}
%   wd   = cimg["working-directory"]
    <%= wd.nil? ? "nil" : "\"" + wd + "\"" %>
  end

  # The set of shell commands to run on the cluster to execute <%= name %>.
  # Any output on stdout or stderr will be captured and logged for information
  # or debugging purposes.
  # Note that this function also generates the list of output filenames
  # in params.
  def cluster_commands #:nodoc:
    # If we have a superclass that knows how to generate the commands
    # better than we do, we just delegate all the work to it.
    if self.class.superclass.respond_to?(:override_cluster_commands) &&
       self.class.superclass.override_cluster_commands.present?
      return super
    end

%   shell            = descriptor['shell'].presence
%   cmdline_template = descriptor['command-line']
%   shell_wrap_start = "#{shell} <<'BoutiquesShellWrapper'"
%   shell_wrap_end   = "BoutiquesShellWrapper"
%   shell_wrap_start=shell_wrap_end="" if shell.nil? || shell =~ /\A(bash|\/bin\/bash|sh|\/bin\/sh)\z/
    # Command template from the descriptor.
% if shell_wrap_end.present?
    # The descriptor specified that it is to be run with: <%= shell %>
% end
    command_template = <<-'COMMAND_TEMPLATE'
<%= shell_wrap_start %>
<%= cmdline_template %>
<%= shell_wrap_end %>
    COMMAND_TEMPLATE

    # Environment variables from Boutiques descriptor
% if eVars.empty?
    envVars = []
% else
    envVars = [
%    eVars.each do |v|
%# The value is escaped for bash; the whole cmd is then escaped to be written into the ruby code
      <%= ("export %s=%s" % [v['name'], v['value'].bash_escape(true)]).inspect %>,
%    end
    ]
% end

% if in_keys.empty? && out_keys.empty?
%   unless outputs.empty?
    # Output filenames
    self.params.merge!({
%     id_width = max_width.(outputs, 'id') + ":''".length
%     outputs.each do |output|
      <%=
        "%-#{id_width}s => %s" % [
          ":'#{output['id']}'",
          "'#{output['path-template']}',"
        ]
      %>
%     end
    })

%   end
%   if (descriptor['custom'] || {})['cbrain:ignore-exit-status']
    # Command-line
    envVars + [ <<-'CMD' ]
%   else
    # Command-line to run <%= name %> and save its exit status
    envVars + [ command_template, "echo $? > ./#{exit_cluster_filename.bash_escape}" ]
%   end
% else
    params = self.params

    # <%= name %>'s command line and output file names is constructed from a
    # set of key-value pairs (keys) which are substituted in the command line
    # and output templates. For example, if we have { '[1]' => '5' } for keys,
    # a command line such as "foo [1] -e [1]" would turn into "foo 5 -e 5".

%   unless in_keys.empty?
    # Substitution keys for input parameters
    keys = {
%     key_width = max_width.(in_keys, 'value-key') + "'".length
%     in_keys.each do |key|
      <%=
        "'%-#{key_width}s => params[:'%s']," % [
          key['value-key'] + "'",
          key['id']
        ]
      %>
%     end
    }

%   end
%   unless out_keys.empty?
    # Substitution keys for output files
%     if in_keys.empty?
    keys = {
%     else
    keys.merge!({
%     end
%
%     key_width  = max_width.(out_keys, 'value-key') + "''".length
%     path_width = max_width.(out_keys, 'path-template')    + "'',".length
%     out_keys.each do |key|
%       stripped = key['path-template-stripped-extensions']
      <%=
        "%-#{key_width}s => apply_template(%-#{path_width}s keys%s" % [
          "'#{key['value-key']}'",
          "'#{key['path-template']}',",
          stripped ? ', strip: [' : '),'
        ]
      %>
%       if stripped
%         stripped.each do |ext|
        '<%= ext %>',
%         end
      ]),
%       end
%     end
    })
%   end

%   unless flags.empty?
    # Input/output command-line flags used with keys in command-line
    # substitution.
    flags = {
%     key_width = max_width.(flags, 'value-key')  + "''".length
%     flags.each do |flag|
      <%=
        "%-#{key_width}s => %s" % [
          "'#{flag['value-key']}'",
          "'#{flag['command-line-flag']}',"
        ]
      %>
%     end
    }
%   end

%   unless seps.empty?
    # Input command-line separators (with flags) used with keys in command-line
    # substitution.
    seps = {
%     key_width = max_width.(seps, 'value-key')  + "''".length
%     seps.each do |sep|
      <%=
        "%-#{key_width}s => %s" % [
          "'#{sep['value-key']}'",
          "'#{sep['command-line-flag-separator']}',"
        ]
      %>
%     end
    }
%   end

%   unless list_seps.empty?
    # Input command-line separators (with list-separator) used with keys in command-line
    # substitution.
    list_seps = {
%     key_width = max_width.(list_seps, 'value-key')  + "''".length
%     list_seps.each do |list_sep|
      <%=
        "%-#{key_width}s => %s" % [
          "'#{list_sep['value-key']}'",
          "'#{list_sep['list-separator']}',"
        ]
      %>
%     end
    }
%   end

    outfileMoveCommands = []
%   unless outputs.empty?
    # Generate output filenames
    params.merge!({
%     id_width   = max_width.(outputs, 'id')          + ":''".length
%     path_width = max_width.(outputs, 'path-template') + "'',".length
%     outputs.each do |output|
%       stripped = output['path-template-stripped-extensions']
%       strp_str = "strip: [" + stripped.map{ |s| "'#{s}'" }.join(",") + "]" rescue nil
      <%=
        "%-#{id_width}s => apply_template(%-#{path_width}s keys#{stripped ? ", " + strp_str : ''})," % [
          ":'#{output['id']}'",
          "'#{output['path-template']}',"
        ]
      %>
%     end
    })

%#  If we are going to execute in a container, we need to detect output files outside the mounted directory,
%#  add commands to mv them there, and then change the file paths to look there when saving results.
%   containerImage = descriptor['container-image']
%   if containerImage
    # If execution will occur in a container, alter the output file paths to compensate
    if self.use_docker?
      # Task launch directory (mounted into as pwd if specified)
      # Note: assumes container_wd is absolute
%     customWd = containerImage['working-directory']
      container_wd = <%= customWd ? "\"" + customWd + "\"" : "self.full_cluster_workdir" %>
%     outids = outputs.map { |p| ":'#{p['id']}'" }.join(", ")
      is_underneath = lambda { |base,potential| (Pathname.new(potential)).fnmatch?(File.join(base,'**')) }
      [<%= outids %>].each do |outid|
        # Do not issue move commands for optional output files with empty path templates
        next if params[ outid ].nil? or params[ outid ] == ''
        # Relative paths are assumed to be with respect to the mounted directory
        currentPath = File.absolute_path( params[ outid ], container_wd )
        # If the current path is not in the directory subtree of the mounted directory,
        # issue a move command at the end of cluster_commands and alter the path to search
        # for output files accordingly
        unless is_underneath.( container_wd, currentPath )
          # Move the file to the mounted dir (to be run post-execution, in the container)
          # Warning: potential overwrite dangers if there is a same-named local file
          newPosition = File.join( container_wd, File.basename(currentPath) )
          outfileMoveCommands << "mv #{currentPath.bash_escape} #{newPosition.bash_escape}"
          # Alter where cbrain should look for the file (outside container)
          params[ outid ] = File.basename(newPosition)
        end
      end
    end
%   end # if containerImage (i.e. output filepath changes for containerized tasks)
%   end
%   if (descriptor['custom'] || {})['cbrain:ignore-exit-status']
    # Generate the final command-line to run <%= name %>
    envVars + [ apply_template( command_template,
                                keys<%= flags.empty? ? '' : ', flags: flags' %><%= seps.empty? ? '' : ', separators: seps' %><%= list_seps.empty? ? '' : ', list_separators: list_seps' %>) ] +
                                outfileMoveCommands
%   else
    # Generate the final command-line to run <%= name %>
    command = apply_template( command_template,
                              keys<%= flags.empty? ? '' : ', flags: flags' %><%= seps.empty? ? '' : ', separators: seps' %><%= list_seps.empty? ? '' : ', list_separators: list_seps' %>)

    # And save its exit status
    envVars + [ command, "echo $? > ./#{exit_cluster_filename.bash_escape}" ] + outfileMoveCommands
%   end
% end
  end # cluster_commands

  # Called after the task is done, this method ensures <%= name %> succeeded and
  # saves its output files to the Bourreau's cache before registering them into
  # CBRAIN for later retrieval. Returns true on success.
  def save_results #:nodoc:

    # If we have a superclass that knows
    # how to save results better than we do, we
    # just delegate all the work to it.
    if self.class.superclass.respond_to?(:override_save_results) &&
       self.class.superclass.override_save_results.present?
      return super
    end

% unless outputs.empty?
    # No matter how many errors occur, we need to save as many output
    # files as possible and carry the error state to the end.
    params    = self.params
    succeeded = true

% end
% unless (descriptor['custom'] || {})['cbrain:ignore-exit-status']
    # Make sure <%= name %> completed successfully by checking its exit status
    # in +exit_cluster_filename+.
    if ! File.exists?(exit_cluster_filename)
      self.addlog("Missing exit status file #{exit_cluster_filename}")
%   if outputs.empty?
      return false
%   else
      succeeded = false
%   end
    else # Check exit status file content is a number.
      status_file_content = File.read(exit_cluster_filename).strip
      if status_file_content.blank? || status_file_content !~ /\A^\d+\z/
        self.addlog("Exit status file #{exit_cluster_filename} has unexpected content")
%   if outputs.empty?
        return false
%   else
        succeeded = false
%   end
      else # Check exit status value
        exit_status = status_file_content.to_i
        unless SystemExit.new(exit_status).success?
          self.addlog("Command failed, exit status #{exit_status}")
%   if outputs.empty?
          return false
%   else
          succeeded = false
%   end
        end # content is success
      end # content exists
    end # file exists

% end
    # Additional checks to see if <%= name %> succeeded would belong here.

% if outputs.present?
    # Identify the output files parameters from params.
    outputs = params.slice(*[
%   outputs.each do |output|
      :'<%= output['id'] %>',
%   end
    ])

    # Helper for checking if an output is to be ignored outright
%   ignoredOutputs = (descriptor['custom'] || {})['cbrain:ignore_outputs'] || []
    isIgnoredOutput = lambda do |f|
      [<%= ignoredOutputs.map{ |x| ":'#{x}'" }.join(",") %>].include?( f.to_sym )
    end

%   unless required.empty?
    # Make sure that every required output +path+ actually exists
    # (or that its +glob+ matches something).
    ensure_exists = lambda do |path|
      if ! path_is_in_workdir?(path) # this also checks the existence
        self.addlog("Output file is missing or outside of task work directory: #{path}")
        succeeded = false
        return
      end
    end
    ensure_matches = lambda do |glob|
      paths = Dir.glob(glob)
      if paths.empty?
        self.addlog("No output files matching #{glob}")
        succeeded = false
      end
      paths.each do |path|
        next if path_is_in_workdir?(path)
        self.addlog("Output doesn't exist or is outside of task work directory: #{path}")
        succeeded = false
      end
    end

%     required.select { |o| ! o['list'] }.each do |output|
%       next if ignoredOutputs.include?(output['id'].to_s)
    ensure_exists.(outputs[:'<%= output['id'] %>'])
%     end
%     required.select { |o|   o['list'] }.each do |output|
%       next if ignoredOutputs.include?(output['id'].to_s)
    ensure_matches.(outputs[:'<%= output['id'] %>'])
%     end

%   end
%   unless globs.empty?
    # Expand output file globs/patterns inside outputs for output file lists.
    [
%     globs.each do |output|
      :'<%= output['id'] %>',
%     end
    ].each do |param|
      outputs[param] = Dir.glob(outputs[param])
    end

%   end
    # Helper for checking whether outputs are optional
%   optionalFiles = outputs.select { |o| o['optional'] }
    isOptional = lambda do |f|
      [<%= optionalFiles.map{ |x| ":'"+x['id']+"'" }.join(",") %>].include?( f.to_sym )
    end

    # Save (and register) all generated files to the results data provider
    outputs.each do |param, paths|
      if isIgnoredOutput.(param)
        self.addlog("Output parameter '#{param}' is meant to be ignored")
        next
      end
      paths = [paths] unless paths.is_a?(Enumerable)
      paths.each do |path|

        # Print a warning if the file is not present
        # Note that, since the output may be optional, the process may still be successful
        unless path.present? && File.exists?(path)
          self.addlog("Unable to find optional output file: #{path}") if isOptional.(param)
          succeeded = false if ! isOptional.(param)
          next
        end

        next unless path_is_in_workdir?(path) # addlog message already added earlier

        # Get name and filetype
        self.addlog("Attempting to save result file #{path}")
        name = File.basename(path)
        userfile_class   = Userfile.suggested_file_type(name)
        userfile_class ||= ( File.directory?(path) ? FileCollection : SingleFile )

        # Add a run ID to the file name, to make sure the file doesn't exist.
        name.sub!( /(\.\w+(\.gz|\.z|\.bz2|\.zip)?)?\z/i )  { |ext| "-#{self.run_id}" + ext }

        # Save the file (possible overwrite if race condition)
        output = safe_userfile_find_or_new(userfile_class, :name => name)

        unless output.save
          messages = output.errors.full_messages.join("; ")
          self.addlog("Failed to save file #{path} as #{name}")
          self.addlog(messages) if messages.present?
          succeeded = false
          next
        end

        output.cache_copy_from_local_file(path)
        params["_cbrain_output_#{param}"] ||= []
        params["_cbrain_output_#{param}"]  << output.id
        self.addlog("Saved result file #{name}")
%   if (single_file = files.first if files.count == 1 && ! files.first['list'])

        # As all output files were generated from a single input file,
        # the outputs can all be made children of the one parent input file.
        parent = Userfile.find_by_id(params[:'<%= single_file['id'] %>'])
        output.move_to_child_of(parent) if parent
        self.addlog_to_userfiles_these_created_these([parent], [output]) if parent
%   else
%     input_ids = files.map { |i| i['id'] } # strings, like "minc", "baseline" etc
%     if input_ids.present?

        # Add provenance data when multiple input files exist
        parent_names = [ <%= input_ids.map { |x| ":'#{x}', " }.join %> ]
        parent_ids   = parent_names.map { |n| params[n] || params[n.to_s] }.compact
        parents      = parent_ids.map   { |i| Userfile.where(:id => i).first }.compact
        self.addlog_to_userfiles_these_created_these(parents, [output]) if parents.present?
%     end
%   end
      end
    end
% end

% # This block saves back inputs back to their provider side
% # if the descriptor specifies that a successful task should do that.
% resync_inputs = (descriptor['custom'] || {})['cbrain:save_back_inputs'] || []
% if resync_inputs.present?
    # Resync inputs back to provider
    if succeeded
      rsync_input_ids = [ <%= resync_inputs.map { |x| ":'#{x}'" }.join(", ") %> ]
      rsync_input_ids.each do |input_id|
        userfile_id = params[input_id].presence
        next if ! userfile_id
        userfile = Userfile.find(userfile_id)
        self.addlog "Attempting to save back input '#{userfile.name}' on DataProvider '#{userfile.data_provider.name}'"
        userfile.cache_is_newer
        userfile.sync_to_provider
        self.addlog_to_userfiles_processed(userfile, "(content modified in place)")
      end
    end

% end
    succeeded
  end

% if descriptor['cbrain:walltime-estimate'] or descriptor['suggested-resources'].try(:[],'walltime-estimate')
  # Conservative maximal run time estimate for <%= name %> when submitting a
  # job on a cluster. This value should be somewhat larger than the longest
  # expected run without being overly excessive; it will be submitted along
  # with the job to the cluster management system for scheduling purposes.
  def job_walltime_estimate
    (<%= (descriptor['cbrain:walltime-estimate']) ?
          descriptor['cbrain:walltime-estimate'].to_s : descriptor['suggested-resources'].try(:[], 'walltime-estimate').to_s  %>).seconds
  end

% end
  # Generic helper methods
% unless (descriptor['custom'] || {})['cbrain:ignore-exit-status']

  # Filename used to hold the exit status of <%= name %>, computed similarly
  # to +*_cluster_filename+. This file is generated as soon as the task is
  # completed and is checked in +save_results+ to make sure the task succeeded.
  def exit_cluster_filename
    ".qsub.exit.#{self.name}.#{self.run_id}"
  end
% end

  # Make a given set of userfiles +files+ available to <%= name %> at
  # +directory+. Simple variation on +ClusterTask+::+make_available+
  # to allow +files+ to be an Enumerable of files to make available under
  # +directory+.
  def multi_make_available_to_dir(files, directory, userfile_sub_path = nil, start_dir = nil, isList = false, param_id = nil, args = nil )
    files = [files] unless files.is_a?(Enumerable)

    files
      .map(&:presence)
      .compact
      .each do |file| # an ID or a userfile object

        # Each entry of the file list should be available
        if isList
          file_list = Userfile.find(file.to_i)
          @_file_access ||= (self.class.properties[:readonly_input_files].present? || self.tool_config.inputs_readonly ? :read : :write)
          user = User.find(self.user_id)
          files_info  = file_list.userfiles_accessible_by_user!(user, nil, nil, @_file_access)

          files_id   = files_info.map{|x| "#{x.id}"}
          self.params["interface_userfile_ids"] = self.params["interface_userfile_ids"] | files_id
          files_name = files_info.map{|x| x.name}.join(" ")

          # make_available all file present in the cbcsv file
          files_id.each do |id|
            make_available(id, directory + '/', userfile_sub_path, start_dir)
          end

          self.params[param_id] = files_name

        end

        # The CbrainFileList itself should be available
        make_available(file, directory + '/', userfile_sub_path, start_dir)
      end

  end

  # Apply substitution keys +keys+ to +template+ in order to format a
  # command-line or output file name.
  # Substitute each value in +keys+ in +template+,
  #   - prepended by the corresponding flag in +flags+ (if available),
  #   - stripped of the endings in +strip+,
  #   - separated by the corresponding string in +separators+ for flags
  #   - separated by the corresponding string in +list_separators+ for list
  # Some examples:
  #   apply_template('f [1]', { '[1]' => 5 })
  #     => 'f 5'
  #
  #   apply_template('f [1]', { '[1]' => 5 },
  #     flags: { '[1]' => '-z' }
  #   ) => 'f -z 5'
  #
  #   apply_template('f [1]', { '[1]' => '5.z' },
  #     flags: { '[1]' => '-z' },
  #     strip: [ '.z' ]
  #   ) => 'f -z 5'
  #
  #   apply_template('f [1]', { '[1]' => '5' },
  #     flags: { '[1]' => '-z' },
  #     separators: { '[1]' => '=' }
  #   ) => 'f -z=5'
  #
  #   apply_template('f [1]', { '[1]' => '[1 2 3]' },
  #     flags: { '[1]' => '-z' },
  #     list_separators: {'[1]' => "*"}
  #   ) => 'f -z 1*2*3'
  #
  def apply_template(template, keys, flags: {}, strip: [], separators: {}, list_separators: {})
    # Set of properties from the descriptor for file-type inputs
    fileKeys = [<%= files.select{|f| f['list'] != true}.map { |f| '"' + (f['value-key'] || 'nil') + '"' }.join(",") %>]
    isFileList =  lambda { |p| [<%= files_list.map { |f| ":'#{f['id']}'" }.join(',') %>].include?(p) }

    absPath  = [<%= files.map { |f|      f['uses-absolute-path'] || false }.join(",") %>]
    # The working directory from which the task will be launched
    # Used to fill in absolute paths for inputs requesting it
    wd = self.container_working_directory || self.full_cluster_workdir

    keys.inject(template) do |template, (key, value)|
      flag = flags[key]
      sep_init = separators[key]
      sep_list = list_separators[key] || ' '

      # Flag type
      isBool = (value.is_a?(TrueClass) || value.is_a?(FalseClass))
      next template.gsub(key, (flag && value==true)  ? flag : '') if flag && isBool

      value = (value.is_a?(Enumerable) ? value.dup : [value])
        .reject(&:nil?)
        .map do |v|

          # Resolve file ids to names
          if fileKeys.include?(key)
            currFile = Userfile.find_by_id(v)
            cb_error("Unable to find given userfile with id #{v}!") unless currFile
            v = currFile.name
            # If uses-absolute-path is true, convert the filename to a path
            if absPath[ fileKeys.index(key) ]
              v = File.join( File.absolute_path(wd), v)
            end
          end

          v = v.dup if v.is_a?(String)

          strip.find do |e|
            v.sub!(/#{Regexp.quote(e)}\z/, '')
          end if v.is_a?(String)

          v.to_s.bash_escape
        end
        .join(sep_list)
      sep = (sep_init.nil?) ? ' ' : sep_init # Default separator is space
      template.gsub(key){ (flag && value.present?) ? "#{flag}#{sep}#{value}" : value }
    end
  end

end
