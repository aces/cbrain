
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2021
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<%
#
# This partial uses @descriptor and also receives a few data structures
# prepared in _task_parameters.html.erb:
#
#  interface_files
%>

<%
    # Handling for multi-task generation via CBCSVs
    cbcsvs       = interface_files.where(:type => 'CbrainFileList').to_a
    cbcsvToFiles = cbcsvs.map do |f|                       # Only used for preview button
      f.sync_to_cache # silly and blocking
      ids = f.ordered_raw_ids.reject { |i| i.blank? || i == 0 }
      names = Userfile.find_all_accessible_by_user(@task.user, :access_requested => :read).where( 'userfiles.id' => ids).pluck(:name)
      [ f.name, names ]
    end.to_h
%>

<%
    single_file_id = nil
    file_inputs = @descriptor.file_inputs
    if file_inputs.count == 1 && ! file_inputs[0].list
      single_file_id = file_inputs[0].id
    end
%>

<%

# Make maps for which parameters disable/require each other
#
# Generates a map from id to [ids affected by the key id] for a given action name
makeActorActionMap = lambda do |action|
  @descriptor.inputs.inject({}){ |hmap,i| (res=i[action]) ? hmap.merge(i["id"]=>res) : hmap }
end

# Generates a map from id to [ids affecting the key id] for a given action name
makeReceiverActionMap = lambda do |action|
  doesMap = makeActorActionMap.(action)
  doesMap.inject({}) do |map,(key,val)| # invert the relation above (active->passive)
    for v in val do
      if map[v].nil? then map[v] = [key] else map[v] << key end
    end
    map
  end
end

# Generates a map from id to [ids affecting the key id with values] for a given action name
makeReceiverWithValueActionMap = lambda do |action|
  tmp_doesMap = makeActorActionMap.(action)
  doesMap     = {}

  tmp_doesMap.each do |disable_by, value_disables|
    value_disables.each do |value, ids|
      ids.each do |id|
        doesMap[id] = doesMap[id] || {};
        if (doesMap[id] && doesMap[id][disable_by])
          doesMap[id][disable_by].push(value)
        elsif (doesMap[id]) 
          doesMap[id][disable_by] = [value]
        end
      end
    end
  end
  
  doesMap
end

# The actual maps: idIn -> [ids disabled/required by idIn]
requires_map     = makeActorActionMap.("requires-inputs")
disabledBy_map   = makeReceiverActionMap.("disables-inputs")
disabledBy_value = makeReceiverWithValueActionMap.("value-disables")

# Implement dynamic mutual exclusion within a group by pairwise adding to the disables map
for group in (@descriptor.groups || [])
  if group['mutually-exclusive']
    for mId in group['members']
      # Add all members of the group, except this one and ones already disabling it
      alreadyDisables = lambda { |id| (disabledBy_map[mId] || []).include? id }
      toAdd = group['members'].select{ |id| (id!=mId) && (! alreadyDisables.(id) ) }
      disabledBy_map[mId] = ( (disabledBy_map[mId] + toAdd) rescue toAdd )
    end
  end
end

inputs      = @descriptor.inputs
min_inputs  = inputs.select { |i| i.type == 'Number' && i.minimum.present? }
max_inputs  = inputs.select { |i| i.type == 'Number' && i.maximum.present? }
int_inputs  = inputs.select { |i| i.type == 'Number' && i.integer.present? }

# Maps and lists that are subsituted in the javascript code below
names_map           = inputs.map { |i| [i.id, i.name] }.to_h
min_inputs_map      = min_inputs.map { |i| [i.id, i.minimum] }.to_h
max_inputs_map      = max_inputs.map { |i| [i.id, i.maximum] }.to_h
min_inputs_exc_list = min_inputs.select { |i| i.exclusive_minimum.present? }.map(&:id)
max_inputs_exc_list = max_inputs.select { |i| i.exclusive_maximum.present? }.map(&:id)
int_inputs_list     = int_inputs.map(&:id)

%>

<%# Pierre's cute JSON inline serializer %>
<% json = lambda { |x| JSON[x].html_safe } %>

<script type="application/javascript">

"use strict";

$(function () {
  "use strict";

  var parameters = $('.tsk-prm');

  /*
   * Remove the checked attribute of checkboxes and use their internal
   * state instead.
   */
  parameters.find("input[type='checkbox'][checked='checked']").each(function () {
    $(this)
      .removeAttr('checked')
      .prop('checked', true);
  });

  /*** Handle disables and requires relations between parameters ***/

  /* Javascript dictionaries for names, disabledBy, and requires */
  var namesMap          = <%= json.( names_map ) %>;
  var requiresMap       = <%= json.( requires_map ) %>;
  var disabledByMap     = <%= json.( disabledBy_map ) %>;
  var disabledByValue   = <%= json.( disabledBy_value ) %>;

  // Function to map ids to names to make the messages a little prettier
  var idToName = function(x){ return namesMap[x]; }

  // Helper function that checks whether a given parameter is active
  var isActiveParam = function(id) {
    var targ = $( 'li.' + ("btq-" + id) + '.tsk-prm' );
    if( targ.hasClass( 'flag' ) ){ // Flag case
      return targ.find('.tsk-prm-chk').prop('checked');
    }
    return targ.find('.tsk-prm-opt').prop('checked'); // Non-flag case
  }

  // Helper function that checks whether a given parameter is active with specific values
  var isActiveParamWithValues = function(disable_by, disabled_by_values) {
    var targ = $( 'li.' + ("btq-" + disable_by) + '.tsk-prm' );

    var current_values = ($(targ[0].querySelector('select')) && $(targ[0].querySelector('select')).val()) || 
                            [targ[0].querySelector('input[type="hidden"]') && targ[0].querySelector('input[type="hidden"]').value]; 
        current_values = (current_values && current_values.filter(k => k !== "")) || [];

    return current_values.filter(value => disabled_by_values.includes(value));
  }

  // Helper for checking array containment because JS won't let you use 'in' for arrays in a useful way
  var arrHas = function(arr,val){
    return ($.inArray(val,arr) > -1)
  }

  // Warning message style written to tell the user when/why something is disabled or wrong
  var warningStyle = 'style="display: block; float: right; font-style: normal; font-weight: normal; ' +
                     'font-size: 0.95em; color: rgb(255,50,50); margin-right: 17pt"';

  /*
   * Disables the targets of every active parameter within its disables list
   * Also disables parameters whose required parameters are inactive, unless it
   * is a mutual required relation.
   */
  function handleDisablesAndRequires() {

    // Function for disabling/enabling parameters
    var toggleFunctionality = function(target, shouldDisable, greyOutMsg) {
      var lightGrey     = '#d3d3d3'; // Firefox does not grey out disabled html elements
      var lightGrey_img = 'linear-gradient(#d3d3d3 1%, #d3d3d3 15%)';
      // Selector classes
      var toGreyOut     = '.tsk-prm-in, .tsk-prm-opt-lbl, .tsk-prm-chk-lbl, .tsk-prm-sel, .chosen-choices';
      var toDisable     = '.tsk-prm-in, .tsk-prm-opt, .tsk-prm-chk';
      var iconClasses   = '.tsk-prm-opt-icon.ui-icon-check, .tsk-prm-sel-icon, .tsk-prm-add.ui-icon';
      // Disable and grey out text, file, & flag inputs, as well as their checkboxes
      target.find( toGreyOut ).css('background-color', shouldDisable ? lightGrey : '');
      target.find( toGreyOut ).css('background-image', shouldDisable ? lightGrey_img : '');
      target.find( toDisable ).attr('disabled', shouldDisable);
      // For lists and files, toggle the ability to add more entries or change selections
      target.find('.tsk-prm-add.ui-icon,.tsk-prm-sel').css("pointer-events",shouldDisable?"none":"auto");
      // Erase the warning message: if one is needed it will be rewritten below
      target.find('.tsk-prm-lbl').find('label.disable-msg').remove();
      // Handle properties treated differently in each toggle case
      if( shouldDisable ){
        // disable chosen-container
        if (target.find('.chosen-container')[0]){
         target.find('.chosen-container')[0].style.pointerEvents = 'none';
        }
        target.find( iconClasses ).addClass('ui-state-disabled'); // disable icons
        target.find('.tsk-prm-opt, .tsk-prm-chk').prop('checked', false); // uncheck checkboxes
        target.find('.tsk-prm-in').val(''); // wipe textbox input areas
        // target.find('ul.tsk-prm-list').find('li').has('.ui-icon-minus').remove(); // rm list subitems
        // Write warning message
        var msg   = '<label class="disable-msg" ' + warningStyle + '>' + greyOutMsg  + '</label>';
        target.find('.tsk-prm-lbl').append( msg );
      }
      else {
        target.find( iconClasses ).removeClass('ui-state-disabled') // put icons in enabled state
      }
    }

    // Get combined keyset of potentially affected parameters
    var affectedIds = $.unique(Object.keys(disabledByMap).
                        concat(Object.keys(disabledByValue).
                        concat(Object.keys(requiresMap))));

    affectedIds = [...new Set(affectedIds)];

    // Iterate over parameters, enabling and disabling as needed
    affectedIds.forEach( function( key ) {

      // Handle targeted disabling
      var disablers = [];
      if( key in disabledByMap){
        var vals = disabledByMap[key], len = vals.length;
        // Look for disabling parameters
        for(var i = 0; i < len; ++i){
          if( isActiveParam(vals[i]) ){
            disablers.push(namesMap[vals[i]]);
          }
        }
      }

      if (key in disabledByValue) {
        var disabled_by = disabledByValue[key];
        Object.keys(disabled_by).map ( (disable_by) => {
          var disabled_by_values = disabledByValue[key][disable_by];
          var specific_values = isActiveParamWithValues(disable_by, disabled_by_values)
          if (specific_values.length !== 0) {
            var message = namesMap[disable_by] + " (" + specific_values.join(", ") + ")"
            disablers.push(message);
          }
        })
      }

      // Handle parameter requirements (excludes parameters with mutual requirement)
      var missingReqs = [];
      if( key in requiresMap ){
        var vals = requiresMap[key], n = vals.length;
        for(var i = 0; i < n; ++i){
          // If the required parameter is not checked (active)
          if( ! isActiveParam(vals[i]) ){
            // If the required parameter does not require the current target parameter
            if( ( ! (vals[i] in requiresMap) ) || requiresMap[vals[i]].indexOf(key) == -1 ){
              missingReqs.push( vals[i] ); // Then add it to our set of missing requirements
            }
          }
        }
      }

      /* Perform disablings/enablings */
      // Disable the parameter is any of its disablers are on
      var target = $( 'li.' + ('btq-' + key) + '.tsk-prm' );
      if(disablers.length != 0){
        toggleFunctionality(target, true, "Disabled by " + disablers.join(", "));
      }
      // Disable the parameter if it is missing any of its requirements
      else if(missingReqs.length != 0){
        toggleFunctionality(target, true, "Requires " + missingReqs.map(idToName).join(", "));
      }
      // Otherwise, enable the parameter
      else {
        toggleFunctionality(target, false, "");
      }

    });

  }

  /*** Handle constraints on numerical parameters ***/
  /* Maps and lists of constrained parameters */
  var mins = <%= json.( min_inputs_map ) %>;
  var maxs = <%= json.( max_inputs_map ) %>;
  var ints = <%= json.( int_inputs_list ) %>;
  var exclMins = <%= json.( min_inputs_exc_list ) %>;
  var exclMaxs = <%= json.( max_inputs_exc_list ) %>;

  /* Adds warnings to number parameters that violate number constraints */
  function handleNumberConstraints() {

    // Warning message properties
    var cssType = 'num-warning-msg';

    // Helper for adding or removing warnings
    var toggleNumberConstraintWarning = function(target, shouldAdd, msg){
      // Remove the (old) warning message
      target.find('.tsk-prm-lbl').find('label.' + cssType).remove();
      // Add a warning message
      if( shouldAdd ) {
        var formattedMsg = '<label class="'+ cssType + '" ' + warningStyle + '>' + msg  + '</label>';
        target.find('.tsk-prm-lbl').append( formattedMsg );
      }
    }

    // Helper for checking whether strings are integers
    var isInt = function( n ){ return /^[-]?[0-9]+$/.test(n+''); }

    // Get combined keyset of potentially affected parameters
    var targs = $.unique(Object.keys(mins).concat(Object.keys(maxs).concat( ints )));

    // Handle min and max violations
    targs.forEach( function( key ) {

      // Read in the current target value(s)
      var target   = $( 'li.' + ('btq-' + key) + '.tsk-prm' );
      var subtargs = target.find('.tsk-prm-in').map( function(){ return $(this).val(); } );
      var targNum  = subtargs.length;

      // Remove warnings and leave for inactive parameters
      if( ! isActiveParam( key ) ){
        toggleNumberConstraintWarning( target, false, "" );
        return;
      }

      // Loop over possible targets (allows this approach to work for checking lists)
      for( var i = 0; i < targNum; ++i ) {
        // Get current value
        var currval = parseFloat( subtargs[i] );
        // Handle min violations
        if( arrHas(exclMins,key) && currval <= mins[ key ] ){
          toggleNumberConstraintWarning( target, true, "Warning! Exclusive min parameter value is " + mins[ key ] );
        }
        else if( key in mins && currval < mins[ key ] ){
          toggleNumberConstraintWarning( target, true, "Warning! Min parameter value is " + mins[ key ] );
        }
        // Handle max violations
        else if( arrHas(exclMaxs,key) && currval >= maxs[ key ] ){
          toggleNumberConstraintWarning( target, true, "Warning! Exclusive max parameter value is " + maxs[ key ] );
        }
        else if( key in maxs && currval > maxs[ key ] ){
          toggleNumberConstraintWarning( target, true, "Warning! Max parameter value is " + maxs[ key ] );
        }
        // Handle integer violations
        else if( arrHas(ints,key) && ! isInt( subtargs[i] ) ){
          toggleNumberConstraintWarning( target, true, "Warning! Parameter value must be an integer" );
        }
        // If no errors occurred, destroy any prior existing errors
        else{
          toggleNumberConstraintWarning( target, false, "" );
        }
        // Leave if an error is present (avoid list error suppression)
        if( target.find( 'label.' + cssType ).length > 0 ){ return; }
      }

    });

  }

  /* Permit real-time updates to the number warnings */
  parameters.delegate('.tsk-prm-in', 'keyup', function() {
    handleNumberConstraints();
  })


  /*** Optional parameters ***/

  /* Clicking on the parameter's checkbox toggles the parameter's state */
  parameters.delegate('.tsk-prm-opt, .tsk-prm-chk, .tsk-prm-sel, .tsk-prm-sel-mult', 'change activate.tsk-prm', function () {  
    var opt   = $(this),
        param = opt.parent();

    /*
     * When an optional parameter is enabled, add its name attribute
     * (stored in a data-* field) to send them with the POST.
     */
    if (opt.prop('checked')) {
      param.find('.tsk-prm-in').each(function () {
        var name = $(this).data('name');

        $(this).attr('name', name);
      });

    /*
     * When an optional parameter is disabled, clear its value(s) and name
     * attribute.
     */
    } else {
      /* Main value and name attribute */
      param
        .find('.tsk-prm-in')
        .removeAttr('name')
        .val('');

      /* Display value for drop-down inputs */
      param
        .find('.tsk-prm-sel-lbl')
        .text('');

      /* Remove all extra inputs in input lists */
      param
        .find('.tsk-prm-list > li')
        .slice(1)
        .remove();
    }

    /* Check for disables/requires updates */
    handleDisablesAndRequires();

    /* Add warnings for violations of number constraints */
    handleNumberConstraints();

  });

  /* Changing a parameter's value automatically marks it as active, special case for chosen */
  $(".tsk-prm-sel-mult").on('change', function(e,p){
    var values = [...e.target.options].filter(option => option.selected).map(option => option.value);

    $(this)
      .closest('.tsk-prm')
      .find('.tsk-prm-opt')
      .prop('checked', values.length !== 0)
      .trigger('activate.tsk-prm');
  })

  /* Changing a parameter's value automatically marks it as active */
  parameters.delegate('.tsk-prm-in', 'focus activate.tsk-prm', function () {
    $(this)
      .closest('.tsk-prm')
      .find('.tsk-prm-opt')
      .prop('checked', true)
      .trigger('activate.tsk-prm');
  });

  /* Activate optional parameters with default values */
  parameters.find(".tsk-prm-in[value]").trigger('activate.tsk-prm');

  /* Drop-down lists */

  /*
   * Clicking anywhere but the drop-down closes it without changing the
   * selection.
   */
  $('.task-params').click(function () {
    $(this)
      .find('.tsk-prm-sel-opt')
      .hide();
  });

  /* Clicking on the drop-down's label or icon toggles its visibility */
  parameters.delegate('.tsk-prm-sel', 'click', function (event) {
    event.stopPropagation();

    $(this)
      .children('.tsk-prm-sel-opt')
      .toggle();
  });

  /* Clicking on a drop-down item selects it */
  parameters.delegate('.tsk-prm-sel-opt > li', 'click', function () {
    var item  = $(this),
        param = item.closest('.tsk-prm');

    /* Set the backing input element's value */
    param
      .find('.tsk-prm-in')
      .val(item.data('value'))
      .trigger('activate.tsk-prm');

    /* Display the newly selected value in the drop-down's label */
    param
      .find('.tsk-prm-sel-lbl')
      .text(item.text());
  });

  /* Add/remove buttons for list parameters */

  /* Clicking on a '+' button adds a new value row and enables the parameter */
  parameters.delegate('.tsk-prm-add.ui-icon-plus', 'click', function () {
    var name = $(this)
      .siblings('.tsk-prm-in')
      .attr('name');

    $(this)
      .closest('ul')
      .append(
        '<li>' +
          '<input ' +
            'class="tsk-prm-in" ' +
            'type="text" ' +
            'name="' + name + '" ' +
            'data-name="' + name + '" ' +
          '/> ' +
          '<span class="tsk-prm-rm ui-icon ui-icon-minus"></span>' +
        '</li>'
      )
      .siblings('.tsk-prm-opt')
      .prop('checked', true)
      .trigger('activate.tsk-prm');
  });

  /* Clicking on a '-' button removes the row from an input parameter list */
  parameters.delegate('.tsk-prm-rm, .ui-icon-minus', 'click', function () {
    $(this)
      .closest('li')
      .remove();
  });

  /* Toggling groups */
  (function (fcn) {
    $('.group-toggler').each(fcn).change(fcn);
  })(function () {
    $(this)
      .parent() // header (3)
      .parent() // inner div
      .siblings('.prm-grp-mbr, .grp-desc')
      .toggle( $(this).prop('checked') );
  });

  /* Preview Button */
  $("#previewer").click(function () {
    // Classes for the modal (popup)
    var mdiv = 'preview-modal', mcont = 'preview-modal-content', mclose = 'preview-modal-close';
    // Input parameters (fetch ids and data from cbcsvs and json descriptor)
    var ids    = <%= json.( inputs.map(&:id)                                 ) %>;
    var names  = <%= json.( inputs.map(&:name)                               ) %>;
    var reqed  = <%= json.( inputs.select { |p| ! p.optional }.map(&:id)     ) %>;
    var files  = <%= json.( file_inputs.map(&:id)                            ) %>;
    var cbcsvs = <%= json.( cbcsvs.map(&:name)                               ) %>;
    var cids   = <%= json.( cbcsvs.map(&:id)                                 ) %>;
    var flags  = <%= json.( inputs.select { |p| p.type == 'Flag' }.map(&:id) ) %>;
    var cfmap  = <%= json.( cbcsvToFiles                                     ) %>;
    var fileIdsToNames = <%= json.( interface_files.pluck(:id,:name).to_h    ) %>;

    // Helper for extracting value lists
    var getVals = function( id, join ) {
      var vals = $('li.' + ('btq-' + id) + '.tsk-prm').find('.tsk-prm-in').map( function(){ return $(this).val(); } );
      
      if (vals.length === 0 ) {
        var li = $('li.' + ('btq-' + id));
        vals   = li.find(":selected").map(idx => li.find(":selected")[idx]['value']);
      }

      // If not joining, leave
      if( ! join ){ return vals; }
      // Join the array if desired
      var out = "", n = vals.length;
      for( var j = 0; j < n; ++j){
        out += String(vals[j]) + ((j == n-1) ? '' : ', ');
      }
      return out;
    }

    // Handling for the single file case.
    // Here, there is only one file input and all files are automatically placed into it (immutably and automatically).
    // We wish to launch a task for each file, but if the file is a cbcsv, it should launch each of its subfiles as a task.
    // The preview table should reflect this.
    var single     = <%= single_file_id.nil? ? 'false' : "\"#{single_file_id}\"".html_safe %>;
    var singleName = (single == false) ? null : names[ ids.indexOf( single ) ];

    // Get which cbcsvs are in use, if any
    var activeCbcsvs = [], numIds = ids.length;
    if( single != false ){
      activeCbcsvs = cids.slice(0);
    } else {
      for( var i = 0; i < numIds; ++i ) {
        var id = ids[i];
        // Look at active file type parameters
        if( (isActiveParam( id ) || $.inArray(id, reqed) != -1) && $.inArray(id,files) != -1 ) {
          // Get filename; use id to determine type correctness
          var targets = getVals( id, false );
          var targ = String( targets[0] );
          if( $.inArray(targ,cids) != -1 ){
            activeCbcsvs.push( targ );
          }
        }
      }
    }

    // Helpers for the single file input case
    var allFiles = [] // Store a list of all the files, including those from the expanded cbcsv
    if( single != false ) {
      Object.keys( fileIdsToNames ).forEach( function(k) {
        var val = fileIdsToNames[ k ];
        if( $.inArray(k, cids) != -1) {
          var subfiles = cfmap[ val ];
          subfiles.map( function(v) { allFiles.push(v); } )
        } else {
          allFiles.push(val);
        }
      });
    }

    // Store any warnings
    var modalText = '';
    // Compute how many tasks are going to be generated
    var nTasks = 1, nCbcsvs = activeCbcsvs.length, lens = [];
    if( single != false ){
      nTasks = files.length - cbcsvs.length;
      Object.keys(cfmap).forEach( function (k) {
        nTasks += ( cfmap[k] ).length;
      });
    } else {
      for( var t = 0; t < nCbcsvs; ++t ) {
        // Note: here I prevent the code from breaking by taking the smallest active cbcsv
        // If someone attempts to launch with any of the sizes not matching, the after_form check will stop it, so don't worry
        // Hence, here, I give a warning to the user and choose the smallest size to ensure there is no error
        var plen = cfmap[ cbcsvs[ cids.indexOf(activeCbcsvs[t]) ] ].length; // id -> name -> filenames
        lens.push( plen );
        nTasks = (nTasks==1 || nTasks > plen) ? plen : nTasks;
        // Warning if the cbcsvs do not seem to be the right length
        if( lens.some(function(e,i,a){ return plen != e }) ) {
          modalText += "<font color=\"red\">Warning: cbcsvs with multiple unequal lengths detected</font><br><br>";
          break;
        }
      }
    }

    /* Helpers for generating preview tables */
    // CSS classes used
    var tableTextClass = "\"preview-table-text\"",  tableRowClass  = "\"preview-tr\"",         tableFillClass = "\"preview-table-fill\"";
    var tableBodyClass = "\"preview-table-hover\"", tableHeadClass = "\"preview-table-head\"", tableThClass   = "\"preview-th\"";
    var staticTblClass = "\"static-preview-table\"";
    // Adds a single row to a two-column table
    var addTableRow = function(prm, val) {
      return "<tr class="   + tableRowClass  + ">" +
               "<td class=" + tableTextClass + ">" + prm + "</td>" +
               "<td class=" + tableTextClass + ">" + val + "</td>" +
             "</tr>";
    }
    // Generate table for invariant parameters
    var generateStaticTable = function(singleFileCase, genericCase) {
      if (singleFileCase === undefined) { singleFileCase = true; }
      if (genericCase    === undefined) { genericCase    = true; }

      // Generate the title
      modalText += "<strong>Parameters " +
                     ((!singleFileCase && !genericCase) ? "for current task" : "that are constant across tasks") +
                   "</strong><br>";
      // Start the table
      modalText += "<table class=" + tableFillClass.slice(0,-1) + " " + staticTblClass.slice(1) + ">" + "<tbody class=" + tableBodyClass + ">";
      // Loop over possible entries (i.e. parameter ids)
      for( var i = 0; i < numIds; ++i ) {
        var id = ids[i];
        // Only consider active or required parameters
        if( isActiveParam( id ) || $.inArray(id, reqed) != -1 ) {
          // Skip files in the single file special case
          if( singleFileCase && ($.inArray(id, files) != -1) ) { continue; }
          // Extract the values associated to that parameter (flags are given true)
          var vals = ($.inArray(id, flags) != -1) ? "True" : getVals( id, true );
          // Ignore cbcsvs in the generic case (they will be in the dynamic table)
          if( genericCase && ($.inArray(vals, cids) != -1) ) { continue; }
          // Parameter name to put in the table
          var prmName = names[i];
          // For files, get their names instead of their ids
          vals = ($.inArray(id, files) == -1) ? vals : fileIdsToNames[vals]
          modalText += addTableRow(prmName, vals);
        }
      }
      // End the table
      modalText += "</tbody> </table> <br>";
    }
    // Generate table for inter-task varying parameters
    var generateDynamicTable = function( singleFileCase ) {
      if (singleFileCase === undefined) { singleFileCase = true; }

      // Add the title
      modalText += "<strong>Parameter values that change across tasks:</strong><br><br>";
      // Get parameters with cbcsv entries
      var iteratedParams = [];
      for( var i = 0; i < numIds; ++i ) {
        var id = ids[i];
        // Only consider active or required parameters
        if( isActiveParam( id ) || $.inArray(id, reqed) != -1 ) {
          // Extract the values associated to that parameter (flags are given true)
          var vals = ($.inArray(id, flags) != -1) ? "True" : getVals( id, true );
          // Grab the id & name if it is a cbcsv inside
          if( $.inArray(vals, cids) != -1 ){
            iteratedParams.push( [id, names[i]] );
          }
        }
      }
      // Now for the table head
      modalText += "<table class=" + tableFillClass + "><thead class=" + tableHeadClass + ">" +
                   "<tr class=" + tableRowClass + "><th class=" + tableThClass + ">Task</th>";
      if( singleFileCase ) { // Only one parameter is being iterated over
        modalText += "<th class=" + tableThClass + ">" + singleName + "</th>";
      } else { // Need to generate a column for each parameter with a cbcsv
        for( var i = 0; i < iteratedParams.length; ++i ) {
          modalText += "<th class=" + tableThClass + ">" + iteratedParams[i][1] + "</th>";
        }
      }
      // And now the table body
      modalText += "</tr></thead><tbody class=" + tableBodyClass + ">";
      // Generate a table row per task (i.e. per file)
      if( singleFileCase ) {
        for( var t = 0, k = 0; t < allFiles.length; ++t ) {
          // Skip rows that have a nil entry (they will not be launched)
          if( allFiles[t] == '' ){ continue; }
          // Otherwise, add a row for the task
          modalText += addTableRow( ++k, allFiles[t] );
        }
      } else { // generic case
        var ncols = nCbcsvs, nrows = nTasks;
        for( var i = 0; i < nrows; ++i ) {   // For each row,
          modalText += "<tr class=" + tableRowClass + "><td class=" + tableTextClass + ">" + i + "</td>";
          for( var j = 0; j < ncols; ++j ) { // generate a column per input
            // Associated id
            var currId  = iteratedParams[j][0];
            // Get cbcsv in that id
            var cbcsvId = getVals( currId, false )[0];
            // Get cbcsv object and its associated files for that id
            var cbcsvfs = cfmap[ fileIdsToNames[ cbcsvId ] ];
            // Add column to current row
            modalText += "<td class=" + tableTextClass + ">" + cbcsvfs[i] + "</td>";
          }
          modalText += "</tr>"; // End current table row
        }
      }
      // Close off the table
      modalText += "</tbody> </table> <br>";
    }

    ////* Actually draw the table now *////

    /* Special case: single task present (no cbcsvs, with more than one file input) */
    if( nTasks == 1 ) {
      generateStaticTable();
    }
    /* Special case: single File-type input parameter present (all files are placed into that input and a task is launched for each). */
    // Any cbcsv files present in that input are expanded to launch a task for each of their entries instead.
    else if( single != false ) {
      // Draw the static table, ignoring the cbcsvs among the inputs of the single file parameter
      generateStaticTable( true )
      // Draw the dynamic table, with a task (row) for each file in allFiles
      generateDynamicTable();
    }
    /* Generic case: otherwise, add static and dynamic sections to the preview */
    // Handles the single file multitask launch case or the cbcsv case
    else {
      // Generate table for static parameters, ignoring cbcsvs
      generateStaticTable( false, true );
      // Generate text for the dynamic parameters (i.e. with input cbcsvs)
      generateDynamicTable( false );
    }

    // Attach modal to preview button and display it
    $('.preview-div').append(
      '<div class="' + mdiv + ' modal">' +
        '<div class="' + mcont + '">' +
          '<span class="' + mclose + '">x</span>' +
          '<p>' + modalText + '</p>' +
        '</div>' +
      '</div>'
    );

    // Resize it so the height does not go offscreen
    $('.' + mcont).css('height', Math.round(window.innerHeight * 0.8) + 'px');
    // Attach closing listeners to it
    $('.' + mclose).click(function () {
      $('.' + mdiv).remove();  // Removal if 'x' is clicked
    });
    $('.' + mdiv).click(function () {
      $('.' + mdiv).remove();  // Removal if click outside
    });
    $('.' + mcont).click(function (event) {
      event.stopPropagation(); // Prevent removal if click inside
    });

  });

});
</script>

