
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<%= error_messages_for @tool_config %>

<%= show_table_context(@tool_config) do |cf| %>

  <%= cf.hidden_field :tool_id     %>
  <%= cf.hidden_field :bourreau_id %>

  <% if @tool_config.tool_id && @tool_config.bourreau_id %>

    <%= show_table(@tool_config, :form_helper => cf, :header => "Version configuration info",
                                 :edit_condition => check_role(:admin_user)) do |t| %>

      <% t.edit_cell(:version_name, :header => "Version") do |f| %>
        <%= f.text_field :version_name, :size => 20 %>
        <div class="field_explanation">
           Must be a simple string that represent
           a short identifier for the version. First character must be alphanum,
           and can contain only alphanums, '.', '-', '_', ':' and '@'
        </div>
      <% end %>

      <% t.cell("Created") { @tool_config.created_at.present? ? to_localtime(@tool_config.created_at,:datetime) : "" } %>

      <% t.edit_cell(:group_id, :header => "Project access",
                     :content => link_to_group_if_accessible(@tool_config.group_id)) do %>
        <%= group_select "tool_config[group_id]", @tool_config.group_id %>
      <% end %>

      <% t.cell("Last Updated") { @tool_config.updated_at.present? ? to_localtime(@tool_config.updated_at,:datetime) : "" } %>

      <% t.edit_cell(:ncpus, :header => "Suggested CPUs per task") do |f| %>
        <%= f.select :ncpus, [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 32, 36, 40, 48, 56, 64, 128, 192, 256,
                              320, 384, 512] %>
      <% end %>

      <% t.empty_cell %>

      <% t.edit_cell(:description, :header => "Description", :show_width => 2, :content => full_description(@tool_config.description)) do |f| %>
        <%= f.text_area :description, :rows => 10, :cols => 120 %>
        <div class="wide_field_explanation">
          The first line must be a short summary, and the rest are for any special
          notes for the users.
        </div>
      <% end %>

      <% t.edit_cell(:inputs_readonly, :header => "Does not modify its inputs files", :show_width => 2) do |f| %>
        <%= f.check_box :inputs_readonly %>
        <div class="wide_field_explanation">
          Check this if the tool is known <strong>not to modify its input files </strong>.
          This will allow a user to launch the tool on files that are not marked as group-writable in the file manager.
        </div>
      <% end %>

      <% desc_origin, desc_path = @tool_config.boutiques_descriptor_origin_keyword %>
      <% desc_content  = "<strong>(#{desc_origin.capitalize})</strong> ".html_safe %>
      <%
         if desc_path.present?
           show_btq_link = link_to("(show)", boutiques_descriptor_tool_config_path(@tool_config))
           desc_content += show_btq_link
         end
      %>
      <% t.edit_cell(:boutiques_descriptor_path, :header => "Path to Boutiques descriptor", :show_width => 2, :content => desc_content) do |f| %>
        <%= f.text_field :boutiques_descriptor_path, :size => 80 %>
        <div class="wide_field_explanation">
          You can use this field to provide an explicit path to a
          Boutiques descriptor; an absolute path will be used as-is,
          while a relative path will be resolved relative to the
          <em>boutiques_descriptor</em> folder in the installed plugins
          subdirectory. The page indicates the source location of the
          effective descriptor: 'Automatic' means the configuration has
          been mapped automatically to an installed descriptor, 'Manual'
          means the value in the input field here is used, and 'Overriden'
          means both values exists, but the 'Manual' version is in effect.
        </div>
      <% end %>

    <% end %>

  <% end %>



  <%= show_table(@tool_config, :form_helper => cf, :header => "Execution Server Control", :edit_condition => check_role(:admin_user)) do |t| %>

    <% t.edit_cell(:extra_qsub_args, :header => "Extra 'qsub' options", :show_width => 2) do |f| %>
      <%= f.text_field :extra_qsub_args, :size => 80 %>
      <div class="wide_field_explanation">
        <b>Note:</b>This string will be appended to the extra 'qsub' option defined at the bourreau level.
      </div>
    <% end %>

  <% end %>



  <%= show_table(@tool_config, :form_helper => cf, :header => "Environment variables",
                               :edit_condition => check_role(:admin_user)) do |t| %>

    <% t.row do %>
      In the generated script, the values shown here will be placed in double quotes automatically.
    <% end %>

    <% @tool_config.env_array.each do |env_name_value| %>
      <% env_name  = env_name_value[0] %>
      <% env_value = env_name_value[1] %>
      <% render :partial => 'env_key_value_pair',
                :locals => { :env_name => env_name, :env_value => env_value, :t => t }
      %>
    <% end %>

    <% 1.upto(5) do %>
      <% render :partial => 'env_key_value_pair',
                :locals => { :env_name => "", :env_value => "", :t => t }
      %>
    <% end %>

    <% t.row do %>
      Note: More environment variables lines can be added by saving and editing again.
    <% end %>

  <% end %>



  <%= show_table @tool_config, :form_helper => cf, :header => "BASH initialization prologue",
                 :edit_condition => check_role(:admin_user) do |t| %>

    <% t.edit_cell(:script_prologue, :content => full_description(@tool_config.script_prologue),
                   :no_header => true) do |f| %>
      <%= f.text_area :script_prologue, :cols => 80, :rows => 10 %>

      <p>
      <div class="wide_field_explanation">
        This is a multi line partial BASH script. It can use the environment variables defined above
        and do anything else you feel is needed to activate this configuration.
        Note that this script should usually be silent, as outputing text (like in <em>echo</em> statements)
        could interfere with the proper processing of the tasks output.
      </div>
    <% end %>

  <% end %>



  <%= show_table @tool_config, :form_helper => cf, :header => "BASH initialization epilogue",
                 :edit_condition => check_role(:admin_user) do |t| %>

    <% t.edit_cell(:script_epilogue, :content => full_description(@tool_config.script_epilogue),
                   :no_header => true) do |f| %>
      <%= f.text_area :script_epilogue, :cols => 80, :rows => 10 %>

      <p>
      <div class="wide_field_explanation">
        This is a multi line partial BASH script, meant to match the prologue above. The code
        here will be execute after the task's processing code.
        Note that this script MUST be silent, as outputing text (like in <em>echo</em> statements)
        could interfere with the proper processing of the tasks output.
      </div>
    <% end %>

  <% end %>



  <%= show_table(@tool_config, :form_helper => cf, :header => "Container", :edit_condition => check_role(:admin_user)) do |t| %>
    <% t.edit_cell(:container_engine, :header => "Container engine") do |f| %>
      <%= f.select :container_engine, [["None", ''], ['Docker', 'Docker'], ['Singularity', 'Singularity']], :title => 'Container type' %>
    <% end %>

    <% t.edit_cell(:container_index_location, :header => "Index of the container image") do |f| %>
      <%= f.text_field :container_index_location %>
      <div class="field_explanation">
        The index (url) of the container image in which the docker or singularity container is
        accessible through.
        Examples for Docker are: quay.io, index.docker.io (default).
        Examples for Singularity are: docker:&sol;&sol;, shub:&sol;&sol; (default).
      </div>
    <% end %>

    <% t.edit_cell(:containerhub_image_name, :header => "Container image name") do |f| %>
      <%= f.text_field :containerhub_image_name %>
        <div class="field_explanation">
        The name and tag of the container image in which the tool is installed,
        for instance "centos:latest". This name refers to the Docker/Singularity index
        accessed by the Bourreau, which is configured manually in the Bourreau
        for now.
        </div>
    <% end %>

    <% t.edit_cell :containerhub_image_name, :content => link_to_userfile_if_accessible(@tool_config.container_image), :header => "ID of the container image" do |f| %>
      <%= f.text_field :container_image_userfile_id %>
      <div class="field_explanation">
        The ID number of the container image in which the tool is installed.
        This ID refers to a proper image file registered in CBRAIN by the admin.
      </div>
    <% end %>

    <% t.edit_cell(:singularity_overlays_specs, :header => "Singularity Overlays", :show_width => 2, :content => full_description(@tool_config.singularity_overlays_specs)) do |f| %>
      <%= f.text_area :singularity_overlays_specs, :rows => 6, :cols => 120 %>
        <div class="wide_field_explanation">
        This field can contain one or several specifications for data overlays
        to be included when the task is started with Singularity.
        A specification can be either
        a full path (e.g. <em>file:/a/b/data.squashfs</em>),
        a path with a pattern (e.g. <em>file:/a/b/data*.squashfs</em>),
        a registered file identified by ID (e.g. <em>userfile:123</em>),
        a SquashFS Data Provider identified by its ID or name (e.g. <em>dp:123</em>, <em>dp:DpNameHere</em>)
        or an ext3 capture overlay basename (e.g. <em>ext3capture:basename=SIZE</em> where size is <em>12G</em> or <em>12M</em>).
        In the case of a Data Provider, the overlays will be the files that the provider uses.
        Each overlay specification should be on a separate line.
        You can add comments, indicated with hash symbol <em>#</em>.
        For example, <em>file:/a/b/atlas.squashfs # brain atlas</em>
        </div>
    <% end %>

    <% t.edit_cell(:container_exec_args, :header => "Misc Singularity Options", :show_width => 2) do |f| %>
      <%= f.text_field :container_exec_args, :size => 60 %>
      <div class="field_explanation">
        This field can contain singularity exec command options. Please use appropriate quotation or escaping
        For example, <em>--cleanenv --env MYPATH='/My Documents'</em>.
      </div>
    <% end %>

    <% t.boolean_edit_cell('tool_config[singularity_use_short_workdir]',
         (@tool_config.singularity_use_short_workdir ? "1" : "0"),
         "1", "0",
         :header => "Use short workdirs inside Singularity")
    %>

  <% end %>



  <% bourreau = @tool_config.bourreau %>
  <% if bourreau.present? && bourreau.scir_class < ScirCloud %>
    <% "" # This is all obsolete code %>
    <% available_disk_images    = bourreau.scir_class.get_available_disk_images(bourreau)
       available_instance_types = bourreau.scir_class.get_available_instance_types(bourreau)
       available_ssh_key_pairs  = bourreau.scir_class.get_available_key_pairs(bourreau)
    %>

    <%= show_table(@tool_config, :form_helper => cf, :header => "Cloud configuration", :edit_condition => check_role(:admin_user)) do |t| %>

      <% t.edit_cell(:cloud_vm_user, header: "VM user") do |f| %>
        <%= f.text_field :cloud_vm_user %>
      <% end %>

      <% t.edit_cell(:cloud_ssh_key_pair, header: "SSH key pair") do |f| %>
        <%= f.select :cloud_ssh_key_pair, available_ssh_key_pairs %>
      <% end %>

      <% t.edit_cell(:cloud_instance_type, header: "Instance type") do |f| %>
        <%= f.select :cloud_instance_type, available_instance_types %>
      <% end %>

      <% t.edit_cell(:cloud_job_slots, header: "Job slots") do |f| %>
        <%= f.text_field :cloud_job_slots %>
      <% end %>

      <% t.edit_cell(:cloud_vm_boot_timeout, header: "VM boot timeout (s)") do |f| %>
        <%= f.text_field :cloud_vm_boot_timeout %>
      <% end %>

      <% t.edit_cell(:cloud_vm_ssh_tunnel_port, header: "VM SSH tunnel port") do |f| %>
        <%= f.text_field :cloud_vm_ssh_tunnel_port %>
      <% end %>

    <% end %>
  <% end %>

  <p>

    <fieldset class="groupentry" style="margin: 0.2em;">
      <legend>Import and merge</legend>
      <div class="wide_field_explanation">
        This panel allows you to merge another configuration into the current form.
        <p>
        <% if @tool_config.tool_id && @tool_config.bourreau_id %>
          The description, environment variables and prologue script will be appended to whatever
          values are currently in the form. The project and suggested number of CPUs will be changed.
        <% else %>
          The environment variables and prologue script will be appended to whatever
          values are currently in the form.
        <% end %>
      </div>

      <%= tool_config_select :merge_from_tc_id, {:allow_offline => true}, { :include_blank => 'Merge from...' } %>
      <%= submit_tag 'Merge Configuration (Preview)', :name => :merge %><br/>

      <hr>

      <%= submit_tag 'Save everything!', :name => :update %>

      <% if ! @tool_config.new_record? %>
        <%= submit_tag 'Reload original', :name => :cancel %>
      <% end %>

      <div class="wide_field_explanation">
        You need to first click the Merge Configuration (Preview), carefully check the results, and only if
        everything is ok click this or any other Update button, and the changed values will persist
      </div>
    </fieldset>

<% end # show_table_context %>

