
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<%
    public_groups = []
    if current_user.has_role? :admin_user
      admin_ids         = AdminUser.all.pluck(:id) || []
      public_groups     = WorkGroup.where( invisible: false, public: true ).all
      nonassign_groups  = WorkGroup.joins(:users).where( invisible: false, public: false,
                                   not_assignable: true, "users.id" => admin_ids ).all
      nonassign_groups |= WorkGroup.where( invisible: false, public: false,
                                   not_assignable: true, creator_id: admin_ids ).all
      nonassign_groups  = nonassign_groups.uniq
      work_groups       = model.groups.select { |g| g.is_a?(WorkGroup) && ! g.invisible && ! g.public  &&
                                                         ! nonassign_groups.include?(g) }
      invis_groups      = WorkGroup.where( invisible: true ).all
    elsif current_user.has_role? :site_manager
      work_groups   = current_user.site.groups.where( :type  => "WorkGroup", :invisible => false ).all | current_user.groups.where( :type => "WorkGroup", :invisible => false )
      invis_groups  = current_user.site.groups.where( :type  => "WorkGroup", :invisible => true )
    else
      work_groups   = []
      invis_groups  = []
    end
    work_groups   = work_groups.sort  { |a,b| a.name <=> b.name }
    invis_groups  = invis_groups.sort { |a,b| a.name <=> b.name }
    public_groups = public_groups.sort { |a,b| a.name <=> b.name }
    class_name    = model.class.sti_root_class.to_s.underscore
%>

<%
  # Convenience helper to render a single checkbox and a group name
  group_check_box = lambda do |group|
    check_box_tag( "#{class_name}[group_ids][]",                 # name
                   group.id.to_s,                                # value
                   model.groups.include?(group),                 # checked or not
                   :id => "#{class_name}_group_ids_#{group.id}"  # unique DOM id
                 ).html_safe +
    h(group.name)
  end
%>



<%= hidden_field_tag "#{class_name}[group_ids][]", [], :id => "#{class_name}_group_ids_unchecked" %>

<% if work_groups.present? %>

  <label>Work Projects</label>
  <%= array_to_table(work_groups, :cols => 4, :td_class => 'left_align no_wrap') do |group,r,c| %>
    <%= group_check_box.(group) %>
  <% end %>

<% end %>



<% if invis_groups.present? %>

  <br>
  <label>Invisible Projects</label>
  <%= array_to_table(invis_groups, :cols => 4, :td_class => 'left_align no_wrap') do |group,r,c| %>
    <%= group_check_box.(group) %>
  <% end %>

<% end %>



<% if public_groups.present? %>

  <br>
  <label>Public Projects</label>
  <%= array_to_table(public_groups, :cols => 4, :td_class => 'left_align no_wrap') do |group,r,c| %>
    <%= group_check_box.(group) %>
  <% end %>

<% end %>



<% if nonassign_groups.present? %>

  <br>
  <label>Non-Assignable Projects</label>
  <%= array_to_table(nonassign_groups, :cols => 4, :td_class => 'left_align no_wrap') do |group,r,c| %>
    <%= group_check_box.(group) %>
  <% end %>

<% end %>
