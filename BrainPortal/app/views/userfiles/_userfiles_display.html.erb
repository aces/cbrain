
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<%=
  render(:partial => 'shared/active_filters', :locals  => {
    :scope => @scope,
    :model => Userfile
  })
%>

<div class="pagination">
  <div class="pagination_left_side">
    <%=
      render(:partial => 'shared/persistent_selection', :locals => {
        :name      => 'userfiles',
        :param     => 'file_ids[]',
        :watch     => 'th.dt-sel > .dt-sel-check',
        :item_name => 'file',
        :all_url   => userfiles_path(:ids_only => 1)
      })
    %>
  </div>
  <div class="page_links">
    (
      <%
        show_total = lambda do |total, name, icon|
          (", #{total} #{name} " + icon).html_safe if
            total.present? && (total.is_a?(String) || total > 0)
        end
      %>
      <%= pluralize(@userfiles_total," entry") %> ,
      <%= colored_pretty_size(@userfiles_total_size) %>
      <%= show_total.(@hidden_total,    'hidden',    hidden_icon) %>
      <%= show_total.(@archived_total,  'archived',  archived_icon) %>
      <%= show_total.(@immutable_total, 'immutable', immutable_icon) %>
    )
  </div>
  <div class="pagination_right_side">
    Search by name: <%= ajax_search_box("name_like", userfiles_path) %>
  </div>
</div>

<%=
  dynamic_scoped_table(@userfiles,
    :id           => 'userfiles_table',
    :request_type => :server_javascript,
    :order_map    => {
      :creation_date => { :a => 'created_at' },
      :login         => { :a => 'users.login',         :j => User         },
      :group         => { :a => 'groups.name',         :j => Group        },
      :data_provider => { :a => 'data_providers.name', :j => DataProvider },
    },
    :filter_map   => {
      :login         => { :a => 'user_id'          },
      :group         => { :a => 'group_id'         },
      :data_provider => { :a => 'data_provider_id' },
    }
  ) do |t|
%>
  <%
    t.paginate(@scope.pagination.per_page > 50 ? :both : :top)

    t.row do |u|
      {
        :selected     => current_session[:persistent_userfiles].try(:include?, u.id.to_s),
        :select_param => 'file_ids[]',
        :select_value => u.id
      } if u.available?
    end
  %>

  <%
    t.column('', :type_icon,
      :pretty_name => "Type Icon"
    ) do |u|
  %>
    <% if u.is_a?(FileCollection) %>
      <span class="ui-icon ui-icon-folder-collapsed"></span>
    <% else %>
      <span class="ui-icon ui-icon-document"></span>
    <% end %>
  <% end %>

  <%
    t.column("Filename", :name,
      :sortable => true
    ) do |u|
      filename_listing(u,
        :html_options => { :class      => ('error_link' unless u.available?) },
        :query_params => { :sort_index => (@current_offset + @userfiles.index(u) if @current_offset) }
      )
    end

    t.column("File Type", :type,
      :field_name => :pretty_type,
      :sortable   => true,
      :filters    => default_filters_for(@base_scope, @custom_scope, :type)
    )

    t.column("Owner", :login,
      :sortable => true,
      :filters  => default_filters_for(@base_scope, @custom_scope, User)
    ) { |u| link_to_user_if_accessible(u.user) }

    t.column("Creation Date", :creation_date,
      :sortable => true
    ) do |u|
      html_tool_tip(to_localtime(u.created_at, :date), :offset_x => 0, :offset_y => 20) do
        ("Created: #{u.created_at.in_time_zone.strftime("%a %b %d, %Y at %H:%M:%S %Z")} <br />" +
         "Updated: #{u.updated_at.in_time_zone.strftime("%a %b %d, %Y at %H:%M:%S %Z")}").html_safe
      end
    end
  %>

  <%
    t.column("Size", :size,
      :sortable => true
    ) do |u|
  %>
    <%= u.archived? ? archived_icon : "" %>
    <% if u.size.present?  %>
      <span title="<%= u.size %> bytes"><%= u.archived ? colored_pretty_size(u.size) : colored_format_size(u) %></span>
    <% else %>
      <%= html_colorize("unknown","red") %>
    <% end %>
    <% if u.archived? %>
      <% before_archiving_size      = u.meta[:before_archiving_size].presence %>
      <% before_archiving_num_files = u.meta[:before_archiving_num_files].presence %>
      <% if before_archiving_size || before_archiving_num_files %>
      (was:
        <%= colored_pretty_size(before_archiving_size) %> in
        <%= before_archiving_num_files ? view_pluralize(before_archiving_num_files, "file") + ")" : "unknown)" %>
      <% end %>
    <% end %>
  <% end %>

  <%
    filtering_tags = ((
      @scope.filters.find do |f|
        f.attribute == 'tags' && f.is_a?(UserfilesController::TagFilter)
      end
    ).try(:value) || []).dup

    t.column("Tags", :tags,
      :filters       => @tag_filters,
      :filter_target => lambda do |column, filter|
        ({
          :controller      => params[:controller],
          :action          => params[:action],
          :page            => 1,
          :_pag_scope_name => @scope.name
        }).merge(scope_filter_params(@scope, :set, {
          'type'  => 'uf.tags',
          'value' => (filtering_tags + [filter.value]).uniq
        }))
      end
    ) do |u|
      u.get_tags_for_user(current_user)
        .collect { |t| h(t.name) }
        .join("<br />")
        .html_safe
    end

    unless current_project
      t.column("Project", :group,
        :sortable => true,
        :filters  => default_filters_for(@base_scope, @custom_scope, Group)
      ) do |u|
        link_to_group_if_accessible(u.group) if u.group
      end
    end

    t.column("Project Access", :group_writable,
      :sortable => true
    ) do |u|
      u.group_writable ? 'Read/Write' : 'Read Only' if u.group
    end

    t.column("Provider", :data_provider,
      :sortable => true,
      :filters  => default_filters_for(@base_scope, @custom_scope, DataProvider)
    ) do |u|
      link_to_data_provider_if_accessible(u.data_provider)
    end

    t.column("Description") do |u|
      html_tool_tip(crop_text_to(40, u.description), :offset_x => 0, :offset_y => 20) do
        simple_format(u.description, :sanitize => true)
      end if u.description.present?
    end
  %>
<% end %>
