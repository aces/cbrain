
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<%
  batch_view = @filter_params["sort_hash"]["order"] == 'cbrain_tasks.batch' rescue nil

  if @row_fetch
    # In row fetch mode, @tasks will contain a list of tasks for a single batch.
    # The loaded batch header is created from this list and the first task of the batch.
    list = @tasks.map { |task| [ :task, task.batch_id, nil, task ] }
  else
    # In table display mode, @paginated_list will contain an already paginated list
    # of batch ids which maps into @tasks, a hash of task_info structures. In this
    # context, a task is a batch with just one task.
    list = @paginated_list.map do |id|
      batch = @tasks[id]
      [ (batch[:num_tasks] == 1 ? :task : :batch), id, batch, batch[:first_task] ] if
        batch.present? && batch[:first_task].present?
    end.compact
  end

  # This table's columns accept 4 arguments (type, id, batch and task) are specially made
  # to render 3 row types;
  #
  # - Task rows (+type+ is :task). +id+ is the task's batch id, +batch+ is not used (can be nil)
  #   and +task+ is the task object to render.
  #
  # - Batch rows (+type+ is :batch). +id+ is the batch's id, +batch+ is a hash containing various
  #   attributes of the batch (task_info) and +task+ is the first task of the batch.
  #
  # - Loaded batch rows (+type+ is :loaded_batch). +id+ is the batch's id, +batch+ is not used and
  #   +task+ is the first task of the batch. This row type is used for AJAX-loaded batch headers.
  table = dynamic_index_table(list,
    :id         => "tasks_table",
    :class      => [ :resource_list ],
    :render     => false,
    :sort_map   => {
      :type         => 'cbrain_tasks.type',
      :description  => 'cbrain_tasks.description',
      :owner        => 'users.login',
      :project      => 'groups.name',
      :server       => 'remote_resources.name',
      :status       => 'cbrain_tasks.status',
      :workdir_size => 'cbrain_tasks.cluster_workdir_size',
      :created_at   => 'cbrain_tasks.created_at',
      :updated_at   => 'cbrain_tasks.updated_at'
    },
    :filter_map => {
      :owner   => 'user_id',
      :project => 'group_id',
      :server  => 'bourreau_id'
    }
  ) do |t|
%>
  <%
    filters_for = lambda do |target, opts = {}|
      return if @row_fetch
      if target.is_a?(Symbol)
        basic_filters_for(@filtered_scope, @header_scope, CbrainTask, target)
      else
        association_filters_for(@filtered_scope, @header_scope, CbrainTask, target, opts)
      end
    end

    t.paginate(:collection => @paginated_list) unless @row_fetch

    t.row do |type,id,batch,task|
      case type
      when :task
        available = @bourreau_status[task.bourreau.id]
        {
          :id    => "task_#{task.id}",
          :class => [ :task ],
          :select_param => ('tasklist[]' if available),
          :select_value => (task.id      if available),
          :html => {
            :'data-task-id'  => task.id,
            :'data-batch-id' => id,
          }
        }
      when :batch, :loaded_batch
        {
          :id    => "batch_#{id}",
          :class => [ :batch ],
          :select_param => 'batch_ids[]',
          :select_value => id,
          :html => {
            :'data-batch-id' => id
          }
        }
      end
    end
  %>

  <% if batch_view %>
    <%
      t.column('', :expand,
        :pretty_name => "Batch"
      ) do |type,id,batch,task|
    %>
      <% next if type == :task %>
      <%
        if type == :loaded_batch
          attributes = {
            :class => [ 'batch-btn', 'ui-icon', 'ui-icon-minus' ],
            :title => "Expand batch"
          }
        elsif batch[:num_tasks] <= @per_page
          attributes = {
            :class => [ 'batch-btn', 'ui-icon', 'ui-icon-plus' ],
            :title => "Expand batch",
            :'data-batch-type' => 'ajax_fetch',
            :'data-batch-url'  => url_for(:action => :batch_list, :batch_id => id)
          }
        else
          attributes = {
            :class => [ 'batch-btn', 'ui-icon', 'ui-icon-folder-open' ],
            :title => "Open batch",
            :'data-batch-type' => 'html_link',
            :'data-batch-url'  =>
              filter_add_link('',
                :controller => :tasks,
                :filters    => { :batch_id => task.batch_id },
                :ajax       => false
              ).match(/href="(.+?)"/)[1]
          }
        end
      %>
      <span <%= attributes.to_html_attributes.html_safe %>></span>
    <% end %>
  <% end %>

  <%
    t.column("Task Type", :type,
      :sortable => true,
      :filters  => filters_for.(:type)
    ) do |type,id,batch,task|
  %>
    <% case type %>
    <% when :task %>
      <%= tree_view_icon(task.level) if @showing_batch || @row_fetch %>
      <%= link_to_task_if_accessible(task, nil, :name => task.pretty_name) %>
    <% when :batch, :loaded_batch %>
      <%= task.pretty_name %>
    <% end %>
  <% end %>

  <%
    t.column("Description", :description,
      :sortable => true
    ) do |type,id,batch,task|
      overlay_description(task.description, :header_width => 35) unless type == :loaded_batch
    end

    t.column("Owner", :owner,
      :sortable => true,
      :filters  => filters_for.(User, :name_method => :login)
    ) do |type,id,batch,task|
      link_to_user_if_accessible(task.user) unless type == :loaded_batch
    end

    t.column("Project", :project,
      :sortable => true,
      :filters  => filters_for.(Group)
    ) do |type,id,batch,task|
      link_to_group_if_accessible(task.group) unless type == :loaded_batch
    end unless current_project

    t.column("Execution Server", :server,
      :sortable => true,
      :filters  => filters_for.(Bourreau, :association_table => :remote_resources)
    ) do |type,id,batch,task|
      link_to_bourreau_if_accessible(task.bourreau) unless type == :loaded_batch
    end
  %>

  <%
    t.column("Current Status", :status,
      :sortable => true,
      :filters  => filters_for.(:status)
    ) do |type,id,batch,task|
  %>
    <%
      case type
      when :task
        next colored_status(task.status)
      when :batch
        ntasks   = batch[:num_tasks]
        statuses = {}
        CbrainTask
          .real_tasks
          .where(:batch_id => id)
          .group(:status)
          .count
          .each do |s,c|
            s = 'Failed' if s =~ /Fail/i
            statuses[s] ||= 0
            statuses[s]  += c
          end
      when :loaded_batch
        ntasks   = @tasks.size
        statuses = {}
        @tasks
          .to_a
          .hashed_partitions { |t| t.status =~ /Fail/i ? 'Failed' : t.status }
          .each { |s,t| statuses[s] = t.size }
      end
    %>
    <%= pluralize(ntasks, "task") if statuses.size > 1 %>
    <%=
      statuses
        .keys
        .sort { |a,b| cmp_status_order(a, b) }
        .map  { |s| "#{statuses[s]} x #{colored_status(s)}" }
        .join(', ')
        .html_safe
    %>
  <% end %>

  <% t.column("Run Number", :run) { |type,id,batch,task| task.run_number.to_s if type == :task } %>

  <%
    t.column("Workdir Size", :workdir_size,
      :sortable => true
    ) do |type,id,batch,task|
  %>
    <% case type %>
    <% when :task %>
      <% if task.share_wd_tid %>
        (Shared)
      <% else %>
        <% as = task.archived_status %>
        <%= colored_archived_status(as) %>
        <% if task.cluster_workdir_size.present? %>
          <%= colored_pretty_size(task.cluster_workdir_size, :blank => '') %>
        <% elsif as == :userfile && ar_file_size = Userfile.where(:id => task.workdir_archive_userfile_id).raw_first_column(:size)[0] %>
          (<%= colored_pretty_size(ar_file_size, :blank => '') %>)
        <% end %>
      <% end %>
    <% when :batch, :loaded_batch %>
      <%= colored_pretty_size(CbrainTask.real_tasks.where(:batch_id => id).sum(:cluster_workdir_size)) %>
    <% end %>
  <% end %>

  <%
    t.column("Time Submitted", :created_at,
      :sortable => true
    ) do |type,id,batch,task|
      case type
      when :task
        to_localtime(task.created_at, :datetime)
      when :batch, :loaded_batch
        to_localtime(task.launch_time, :datetime)
      end
    end

    t.column("Last Updated", :updated_at,
      :sortable => true
    ) do |type,id,batch,task|
      case type
      when :task
        to_localtime(task.updated_at, :datetime)
      when :batch, :loaded_batch
        to_localtime(
          CbrainTask
            .real_tasks
            .where(:batch_id => id)
            .order('cbrain_tasks.updated_at desc')
            .first
            .updated_at,
          :datetime
        )
      end
    end
  %>
<% end %>

<%-
# This partial has 2 modes of operation; table display and row fetch.
# Table display is the standard mode; it renders the entire task table, headers
# and pagination included.
# Row fetch mode is used when making an AJAX request to fetch a batch's tasks.
# Only a loaded batch header and the task themselves are rendered.
-%>

<% if @row_fetch %>
  <% if @tasks.empty? %>
    <tr class="batch">
      <td class="dt-table-wide">
        This batch of tasks has disappeared
      </td>
    </tr>
  <% else %>
    <%= table.render :row, [[ :loaded_batch, @tasks.first.batch_id, nil, @tasks.first ]] %>
    <%= table.render :row, list %>
  <% end %>
<% else %>
  <%= render :partial => 'shared/active_filters', :locals => {:model => :cbrain_task} %>

  <div class="pagination">
    <div class="pagination_left_side">
      <% if batch_view %>
        <strong>Currently in Batch View</strong>
      <% else %>
        <%=
          ajax_link(
            "Switch to Batch View",
            { params[:controller] => { :sort_hash => { :order => 'cbrain_tasks.batch', :dir => 'ASC' } } },
            { :datatype => 'script' }
          )
        %>
      <% end %>
    </div>
    <div class="page_links">
      (<%= pluralize @total_tasks, "task" %>)
    </div>
    <div class="pagination_right_side">
      <% if @total_space_known > 0 %>
        Total task space used: <%= colored_pretty_size(@total_space_known) %>
      <% end %>
      <% if @total_space_unkn  > 0 %>
        (<%= pluralize @total_space_unkn, "task" %> without space estimates)
      <% end %>
    </div>
  </div>

  <% content_for :scripts do %>
    <% javascript_tag (render :partial => "batch_list.js.erb", :formats => [:js]).to_s %>
  <% end %>

  <%= table.render %>

  <%=
    center_legend("Workdir archiving status symbols:", [
      [ colored_archived_status(:workdir),  "On Cluster" ],
      [ colored_archived_status(:userfile), "As File"    ],
    ])
  %>
<% end %>
