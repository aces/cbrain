
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>


<%
  table = dynamic_scoped_table(@bourreaux,
    :id         => "bourreaux_table",
    :class      => [ :resource_list ],
    :scope      => @scope,
    :render     => false,
    :order_map  => {
      :owner => { :a => 'users.login', :j => User  },
      :group => { :a => 'groups.name', :j => Group }
    },
    :filter_map => {
      :owner => { :a => 'user_id'  },
      :group => { :a => 'group_id' }
    }
  ) do |t|
%>
  <%
    loaded = lambda do |resource|
      ! resource.is_a?(Bourreau)   ||
      ! resource.online?           ||
      resource.info_cached?(:ping) ||
      (@row_fetch && resource.info(:ping))
    end

    t.row { |r| { :html => { 'data-info-url' => row_data_bourreau_path(r) } } unless loaded.(r) }

    t.selectable("remote_resource_ids[]")

    t.column("Server Type", :type,
      :sortable => true,
      :filters  => default_filters_for(@base_scope, :type)
    ) { |r| r.is_a?(Bourreau) ? "Execution" : "Portal" }

    t.column("Server Name", :name,
      :sortable => true
    ) do |r|
      link_to_bourreau_if_accessible(r, current_user, :html_options => {
        :class => (! loaded.(r) || r.info(:ping).name != '???') ? nil : 'error_link'
      })
    end

    t.column("Live Revision", :revision,
      :hidden => true
    ) do |r|
      if loaded.(r)
        revision    = r.info(:ping).starttime_revision
        environment = r.info(:ping).environment
        environment = 'Unk Env' if environment == '???'
        red_if(revision != '???' && revision    != CBRAIN::CBRAIN_StartTime_Revision, revision, nil, :color2 => 'red') +
        red_if(revision != '???' && environment != Rails.env, "", " (#{environment}!)")
      else
        html_colorize("(...)", "magenta")
      end
    end

    t.column("Owner", :owner,
      :hidden   => true,
      :sortable => true,
      :filters  => default_filters_for(@base_scope, User)
    ) { |r| link_to_user_with_tooltip(r.user) }

    t.column("Project", :group,
      :sortable => true,
      :filters  => default_filters_for(@base_scope, Group)
    ) { |r| link_to_group_if_accessible(r.group) }

    t.column("Time Zone", :time_zone,
      :hidden   => true,
      :sortable => true,
      :filters  => default_filters_for(@base_scope, :time_zone)
    ) { |r| r.time_zone || "(Unset)" }

    t.column("Online?", :online,
      :sortable => true
    ) { |r| red_if(! r.online?, "Yes", "Offline") }

    t.column("Tasks", :tasks, &(lambda do |r|
      return unless r.is_a?(Bourreau)
      running = CbrainTask.status(:active).where(:bourreau_id => r.id).count

      html_tool_tip(
        index_count_filter(
          running,
          :tasks,
          { :bourreau_id => r.id, :status => :active },
          :show_zeros => true
        ),
        :tooltip_div_class => 'white_bg html_tool_tip'
      ) do
        render :partial => 'load_info', :locals => { :bourreau => r }
      end
    end))

    t.column("Tasks Space", :tasks_space, &(lambda do |r|
      return unless r.is_a?(Bourreau)

      known   = CbrainTask
        .real_tasks
        .where(:bourreau_id => r.id)
        .sum(:cluster_workdir_size)
      unknown = CbrainTask
        .real_tasks
        .where(:bourreau_id => r.id, :cluster_workdir_size => nil)
        .where("cluster_workdir IS NOT NULL")
        .count

      contents  = link_to(colored_pretty_size(known), report_path(
        :table_name  => "cbrain_tasks.combined_task_rep",
        :col_type    => "bourreau_id",
        :row_type    => "user_id",
        :bourreau_id => r.id,
        :generate    => "Go"
      ), { :class => 'no_decorations' })

      contents += " (#{unknown} unkn)" if unknown > 0
      contents
    end))

    t.column("Cache Space (#{check_role(:admin_user) ? 'all' : 'own'})", :cache_space,
      :hidden => true
    ) do |r|
      size = r.sync_status
        .joins(:userfile)
        .where(check_role(:admin_user) ?  {} : { 'userfiles.user_id' => current_user.id })
        .sum('userfiles.size')
        .to_i

      colored_pretty_size(size)
    end

    t.column("Description", :description,
      :hidden   => true,
      :sortable => true
    ) { |r| overlay_description(r.description) }

    t.column("Status page URL", :status_url) do |r|
      link_to("Status", r.external_status_page_url, :class => "action_link", :target => "_blank") if
        r.is_a?(Bourreau) && ! r.external_status_page_url.blank?
    end

#    t.column("Start/Stop", :start_stop, &(lambda do |r|
#      return unless r.is_a?(Bourreau) && r.has_owner_access?(current_user)
#
#      if ! r.has_remote_control_info?
#        html_colorize("(Missing SSH control info)")
#      else
#        link_to('Start', start_bourreau_path(r), :class => 'action_link', :method  => :post) +
#        '&nbsp;&nbsp;&nbsp;'.html_safe +
#        link_to('Stop',  stop_bourreau_path(r),  :class => 'action_link', :method  => :post)
#      end
#    end))

    if current_user.has_role?(:admin_user)
      t.column("Tools", :tools) do |r|
        link_to("(Versions)", {
          :controller  => :tool_configs,
          :action      => :index,
          :bourreau_id => r.id,
          :_simple_filters => 1,
        }, :class => 'action_link') if
          r.is_a?(Bourreau)
      end
    end

    if current_user.has_role?(:admin_user)
      t.column("Control Tunnel", :tunnel, &(lambda do |r|
        return "-" unless r.is_a?(Bourreau)
        #return "-" unless r.online?
        master = r.ssh_master
        if r.online?
          red_if(! master.quick_is_alive?, "Open", "DEAD!")
        else
          master.quick_is_alive? ? "Open" : "-"
        end
      end))
    end

    t.column("Uptime", :uptime, &(lambda do |r|
      info = r.info(:ping) if loaded.(r)
      return html_colorize("(...)", "magenta") unless info
      return red_if(r.online?, "-", "Down!")   if info.name == '???'

      html_tool_tip(
        pretty_elapsed(info.uptime.to_i, :num_components => 2, :short => true),
        :offset_x => 50
      ) do
        "Since #{to_localtime(info.uptime.to_i.seconds.ago, :datetime)}" +
        "(for #{pretty_elapsed(info.uptime.to_i)})"
      end
    end))

    if current_user.has_role?(:admin_user)
      t.column("Task Workers", :task_workers, &(lambda do |r|
        return "-" unless r.is_a?(Bourreau)
        return "-" unless r.online?
        info = r.info(:ping) if loaded.(r)
        nworkers = 0
        if info && info.worker_pids.present? && info.worker_pids != '???'
          nworkers   = info.worker_pids.count(',') + 1
        end
        exp_workers  = r.workers_instances
        proc_workers = r.cbrain_tasks.status(:ruby).count

        mess  = "Workers: #{nworkers || '?'}/#{exp_workers} "
        mess += "(#{proc_workers} processing) " if proc_workers > 0
        if nworkers.to_s != exp_workers.to_s
          html_colorize(mess, "red")
        else
          red_if(proc_workers > 0, mess, nil, :color2 => "orange")
        end
      end))

      t.column("Activity Workers", :bac_workers, &(lambda do |r|
        return "-" unless r.online?
        info = r.info(:ping) if loaded.(r)
        nbacworkers = 0
        if info && info.bac_worker_pids.present? && info.bac_worker_pids != '???'
          nbacworkers  = info.bac_worker_pids.count(',') + 1
        end
        exp_bacworkers   = r.activity_workers_instances
        proc_bac_workers = BackgroundActivity.where(:remote_resource_id => r.id).locked.count

        mess  = "Workers: #{nbacworkers || '?'}/#{exp_bacworkers} "
        mess += "(#{proc_bac_workers} processing) " if proc_bac_workers > 0
        if nbacworkers.to_s != exp_bacworkers.to_s
          html_colorize(mess, "red")
        else
          red_if(proc_bac_workers > 0, mess, nil, :color2 => "orange")
        end
      end))
    end

  %>
<% end %>

<% if @row_fetch %>
    <%= table.render :row, @bourreaux.to_a %>
<% else %>
  <div class="menu_bar">
    <% if check_role(:site_manager) || check_role(:admin_user) %>
      <%= link_to 'Create New Server', new_bourreau_path, :class => "button" %>
    <% end %>
    <%= link_to "User Access Report", rr_access_bourreaux_path,
                :datatype  => 'script', :class  => "button"
    %>

    <%= link_to "Disk Cache Report", rr_disk_usage_bourreaux_path,
                :datatype  => 'script', :class  => "button"
    %>

    <%= link_to "Task Workdir Size Report", report_path(
                  :table_name => "cbrain_tasks.combined_task_rep",
                  :row_type   => :user_id,
                  :col_type   => :bourreau_id,
                  :generate   => "ok"
                ), :class  => "button"
    %>

    <%= link_to "Access to Data Providers", rr_access_dp_bourreaux_path,
                :datatype  => 'script', :class  => "button"
    %>


    <% if check_role(:admin_user) %>

      <%= button_with_dropdown_menu("Start Services") do %>
        <p class="dropmenu_info">
          These buttons start the different layers of services required to
          boot an Execution Server. They are listed in the same order as they
          need to be started. The first three buttons
          only apply to Execution Servers, while <strong>Start Activity Workers</strong>
          applies to both Execution Servers and Portals.
        </p>
        <p class="dropmenu_info">
          Refer the the last four columns of the table to find out what service
          are currently operational. The four buttons in this pannel map
          to them in the same order.
        </p>
        <p class="dropmenu_info">
          Also note that your browser blocks while these requests are being processed;
          be patient and check your browser's progress bar. Do not perform long operations
          on multiple Execution Servers to avoid timeouts.
        </p>
        <hr>
        <div class="centered">
          <p class="dropmenu_info">
            The tunnel is the main communication channel between the Portal
            and the remote server where the Execution Server is configured. It is
            necessary for the Execution Server and the Task Workers. Starting the
            tunnel will mark the Execution Server as "online" in the database.
            Note that you can also start the tunnel with the "Start Execution Server"
            button. Consider starting just the tunnel as a way to verify that the network
            parameters are valid (e.g. to check hostnames, ports, firewalls, etc).
          </p>
          <%= external_submit_button "1. Start Tunnels",       "bourreau_form",
              :class => 'button',
              :name  => 'operation',
              :value => 'start_tunnels'
          %>
          <p class="dropmenu_info">
            The Execution Server requires the tunnel, above. Note that as convenience
            feature, if the tunnel is not started, starting the Execution Server will also
            start the tunnel first.
          </p>
          <%= external_submit_button "2. Start Execution Server",     "bourreau_form",
              :class => 'button',
              :name  => 'operation',
              :value => 'start_bourreaux'
          %>
          <p class="dropmenu_info">
            Task workers require a Tunnel and the Execution Server to be up.
          </p>
          <%= external_submit_button "3a. Start Task Workers", "bourreau_form",
              :class => 'button',
              :name  => 'operation',
              :value => 'start_task_workers'
          %>
          <p class="dropmenu_info">
            Activity workers are the only service that can be started or stopped
            on Portals too. For a Portal, they don't require any of the other layers
            above. On an Execution Server, the require the Tunnel and the Execution Server.
          </p>
          <%= external_submit_button "3b. Start Activity Workers",  "bourreau_form",
              :class => 'button',
              :name  => 'operation',
              :value => 'start_bac_workers'
          %>
        </div>
      <% end %>

      <%= button_with_dropdown_menu("Stop Services") do %>
        <p class="dropmenu_info">
          These buttons stop the different layers of services associated with
          an Execution Server. They are listed in the same order as they
          need to be stopped. The last three buttons
          only apply to Execution Servers, while <strong>Stop Activity Workers</strong>
          applies to both Execution Servers and Portals.
        </p>
        <p class="dropmenu_info">
          Refer the the last four columns of the table to find out what service
          are currently operational. The four buttons in this pannel map
          to them in <em>reverse order</em> (right to left).
        </p>
        <p class="dropmenu_info">
          Note that stopping the Workers (any type) is an action that ask
          them to shut down gracefully. If they are processing something, they will finish it
          first. The last two columns of the table indicate if they are currently busy
          with the word <%= html_colorize("processing in orange text","orange") %>.
          In some cases it can take a long time for the workers to stop. Refreshing this
          page will tell you when they are stopped, but remember that the page's content
          is normally only updated once every 30 seconds.
        </p>
        <p class="dropmenu_info">
          Also note that your browser blocks while these requests are being processed;
          be patient and check your browser's progress bar. Do not perform long operations
          on multiple Execution Servers to avoid timeouts.
        </p>
        <hr>
        <div class="centered">
          <p class="dropmenu_info">
            Activity Workers can run on both Portals and Execution Servers. Stopping them
            will send them a signal to finish their current processing actions and then exit.
          </p>
          <%= external_submit_button "1a. Stop Activity Workers",  "bourreau_form",
              :class => 'button',
              :name  => 'operation',
              :value => 'stop_bac_workers',
              :data  => { :confirm => "Are you sure you want to stop the Activity Workers? They will finish what they are doing first." }
          %>
          <p class="dropmenu_info">
            Stopping Task Workers will send them a signal to finish what they are doing
            and then exit. This can take some time.
          </p>
          <%= external_submit_button "1b. Stop Task Workers", "bourreau_form",
              :class => 'button',
              :name  => 'operation',
              :value => 'stop_task_workers',
              :data  => { :confirm => "Are you sure you want to stop the Task Workers? They will finish what they are doing first." }
          %>
          <p class="dropmenu_info">
            Stopping an Execution Server will also stop the Task Workers <strong>and</strong> Activity Workers running on it.
            Make sure they are not actively <%= html_colorize("processing","orange") %> something.
          </p>
          <%= external_submit_button "2. Stop Bourreaux",     "bourreau_form",
              :class => 'button',
              :name  => 'operation',
              :value => 'stop_bourreaux',
              :data  => { :confirm => "Are you sure? Note that workers will also shut down once they are done, if they are still active." }
          %>
          <p class="dropmenu_info">
            Remember that is it <%= html_colorize("not safe","red") %> to stop Tunnels if
            any of the Workers are currently <%= html_colorize("processing","orange") %> something.
          </p>
          <%= external_submit_button "3. Stop Tunnels",       "bourreau_form",
              :class => 'button',
              :name  => 'operation',
              :value => 'stop_tunnels',
              :data  => { :confirm => "Make sure Bourreaux, Task Workers and Activity workers are all stopped!" }
          %>
        </div>
      <% end %>

    <% end %>

    <%= overlay_ajax_link "Help", "/doc/server/view_server.html", :class  => "button" %>
  </div>

  <%=
    render(:partial => 'shared/active_filters', :locals  => {
      :scope => @scope,
      :model => RemoteResource
    })
  %>

  <% content_for :scripts do %>
    <%= javascript_include_tag 'cbrain/bourreaux/fetch_row' %>
  <% end %>

  <%= form_tag({ :controller => :bourreaux, :action => :operation }, :method => :post, :id => "bourreau_form") do %>
    <%= table.render %>
  <% end %>

<% end %>
