
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<div name="dataprovider_files" class="index_block">

  <h2>
    Files Available On Remote Data Provider '<%= @provider.name %>'
    <% if @as_user != current_user %>
      (Browsing as user '<%= @as_user.login %>')
    <% end %>
  </h2>

  <% if @provider.has_browse_path_capabilities? %>
    <%= render :partial => 'dp_show_path' %>
  <% end %>

  <div class="pagination">
    <div class="pagination_left_side">
      Register files as:
      <%= master_select("file_select", ["..."] + SingleFile.valid_file_classes.map(&:pretty_type).sort) %>,
      and directories as:
      <%= master_select("directory_select", ["..."] + FileCollection.valid_file_classes.map(&:pretty_type).sort) %>
    </div>

    <div class="pagination_right_side">
      Search by name: <%= ajax_search_box("name_like", browse_data_provider_path) %>
    </div>
  </div>

  <%=
    render(:partial => 'shared/active_filters', :locals  => {
      :scope => @scope,
      :model => nil
    })
  %>

  <%=
    dynamic_scoped_table(@files,
      :id           => 'dp_browse_table',
      :class        => [:whole_width],
      :request_type => 'server_javascript',
      :scope        => @scope
    ) do |t|
  %>
    <%
      t.paginate

      t.row do |f|
        {
          :select_param => 'basenames[]',
          :select_value => f.name
        } if f.state_ok
      end

      t.column('Name', :name,
        :sortable => true
      )

      if @provider.has_browse_path_capabilities?
        t.column('CD', :changedir) do |f|
          if f.symbolic_type == :directory
            newpath  = @browse_path.to_s # turns nil into ''
            newpath += "/" if newpath.present?
            newpath += f.name
            ajax_link("&rdsh;".html_safe,
              browse_data_provider_path(@provider, :browse_path => newpath),
              :datatype => 'script', :class =>  'action_link',
            )
          end
        end
      end

      t.column('Size', :size,
        :sortable => true
      ) { |f| f.symbolic_type == :regular ? colored_pretty_size(f.size) : '-' }

      t.column('Type', :symbolic_type,
        :sortable => true,
        :filters  => filter_values_for(@fileinfolist, :symbolic_type,
          format: lambda do |format_info|
            value, label, count = *format_info
            { :value => value.to_s, :label => label.to_s.humanize, :indicator => count }
          end
        )
      ) do |f|
        next f.userfile.pretty_type if f.userfile
        next html_colorize('Unacceptable?') unless f.state_ok

        case f.symbolic_type
        when :regular
          base       = SingleFile
          html_class = 'file_select'
        when :directory
          base       = FileCollection
          html_class = 'directory_select'
        else
          next f.symbolic_type.to_s.humanize
        end

        select_tag('filetypes[]',
          options_for_select(
            base.valid_file_classes.map do |c|
              [c.pretty_type, "#{c.name}-#{f.name}"]
            end,
            class_param_for_name(f.name, base)
          ),
          :class => html_class
        )
      end

      t.column('Last modified', :mtime, :sortable => true)  do |f|
       mtime = f.mtime
       next mtime.nil? ? '-' : to_localtime(Time.at(f.mtime), :datetime)
      end

      t.column('Registered?', :registered) do |f|
          userfile = f.userfile
          next 'No' unless userfile

          owner = "(belongs to user #{userfile.user.login})" unless
            userfile.user_id == current_user.id
          link_to("Registered", { :controller => 'userfiles', :action => 'show', :id => userfile.id }) + " #{owner}"
        end

      t.column('Note', :message)
    %>
  <% end %>

</div>
