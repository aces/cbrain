
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2023
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<%
  is_new_record        = @provider.new_record?
  flattened_types      = @typelist.values.flatten
  include_personal_ssh = flattened_types.include?("UserkeyFlatDirSshDataProvider")
  include_ssh          = flattened_types.include?("SshDataProvider") || flattened_types.include?("SmartDataProviderInterface")
  has_owner_access     = (check_role(:admin_user) || @provider.user_id == current_user.id)
  is_userkey_dp        = @provider.is_a?(UserkeyFlatDirSshDataProvider)
  needs_ssh_config     = @provider.is_a?(SshDataProvider) || @provider.is_a?(SmartDataProviderInterface)
  is_normal_user       = current_user.has_role?(:normal_user)
  url                  = is_normal_user && is_new_record ? url_for(:controller => 'data_providers', :action => 'create_personal') : nil
%>

<% title is_new_record ? 'Create Data Provider' : 'Data Provider Info' %>

<% if !is_new_record %>
  <div class="menu_bar">
    <% if @provider.is_browsable?(current_user) && @provider.online? %>
      <%= link_to 'Browse', browse_data_provider_path(@provider), :class => "button" %>
    <% end %>

    <% if current_user.has_role?(:admin_user) && @provider.method(:impl_provider_report).owner != DataProvider %>
      <%= link_to 'Inconsistency Report', report_data_provider_path(@provider), :class => "button" %>
    <% end %>

    <% if @provider.userfiles.count > 0 %>
      <%= link_to 'File Registration Statistics', report_path(
                    :table_name       => 'userfiles.combined_file_rep',
                    :data_provider_id => @provider.id,
                    :row_type         => :user_id ,
                    :col_type         => :type,
                    :generate         => "ok"
                  ), :class => "button" %>
    <% end %>

    <% if @provider.respond_to?(:check_connection!) %>
      <%= link_to "Test Configuration", check_personal_data_provider_path(@provider), :method => :post, :class => "button" %>
    <% end %>

    <% if has_owner_access %>
      <%= link_to 'Delete', data_provider_path(@provider), { :data => { :confirm => "Are you sure you want to delete '#{@provider.name}' ?" }, :method => :delete, :class => "button" } %>
    <% end %>
  </div>
<% end %>

<P>

<%= error_messages_for @provider, :header_message => "Provider could not be updated." %>

<div class="display_inline_block" style="min-width: 50%">

<%= show_table_context(@provider, :url => url) do |cf| %>
    <%= show_table(@provider, :form_helper => cf, :as => :data_provider, :edit_condition => has_owner_access) do |t| %>

      <% t.edit_cell(:name) do |f| %>
        <%= f.text_field :name %>
      <% end %>

      <% t.edit_cell(:description, :content => full_description(@provider.description)) do  |f| %>
        <%= f.text_area :description, :rows => 10, :cols => 40 %><br>
      <% end %>

      <% if is_new_record || has_owner_access %>
        <% t.edit_cell(:type, :content => @provider.type) do |f| %>
          <%= f.select :type, grouped_options_for_select(@typelist, @provider.type) %>
          <% if !is_normal_user %>
            <br/>
            <%= overlay_ajax_link "(Data Provider Type Information)", "/doc/data_providers/data_provider_info.html", :class  => "help_link" %>
          <% end %>
        <% end %>
      <% else %>
        <% t.empty_cell %>
      <% end %>

      <% t.edit_cell(:online, :content => (@provider.online ? "Online" : "Offline")) do |f| %>
        <%= f.select :online, [["Online", true], ["Offline", false]] %>
      <% end %>

      <% t.edit_cell(:user_id, :header => "Owner", :content => link_to_user_with_tooltip(@provider.user), :disabled => ! current_user.has_role?(:admin_user) ) do %>
        <%= user_select("data_provider[user_id]", { :selector => @provider } ) %>
      <% end %>

      <% t.edit_cell(:read_only, :content => (@provider.read_only ? "Read Only" : "Read/Write"), :header => "Mode") do |f| %>
        <%= f.select :read_only, [["Read/Write", false], ["Read Only", true]] %>
      <% end %>

      <% t.edit_cell(:group_id, :header => "Project", :content => link_to_group_if_accessible(@provider.group) ) do %>
        <%= group_select("data_provider[group_id]", { :selector => @provider }) %>
      <% end %>

      <% t.edit_cell(:not_syncable, :content => (@provider.not_syncable ? "NOT syncable" : "Fully syncable"), :header => "Syncability") do |f| %>
        <%= f.select :not_syncable, [["Fully syncable", false], ["NOT syncable", true]] %>
      <% end %>

      <% if current_user.has_role?(:admin_user) %>
        <% t.cell("Revision Info (DataProvider)", :show_width => 2) { DataProvider.revision_info.format() } %>
        <% t.cell("Revision Info (#{@provider.type})", :show_width => 2) { @provider.revision_info.format() } %>
      <% end %>

      <% if ! is_userkey_dp %>
        <% t.edit_cell(:time_zone, :content => (@provider.time_zone || "(Unset)"), :show_width => 2 ) do |f| %>
          <%= f.select :time_zone, time_zone_options_for_select(@provider.time_zone, /canada/i), :include_blank => true %>
        <% end %>
      <% end %>

      <% if is_new_record || has_owner_access %>
        <% t.edit_cell(:remote_dir, :header => "Physical Data Location", :show_width => 2) do |f| %>
          <%= f.text_field :remote_dir, :size => 80 %>
        <% end %>
      <% end %>

      <% if current_user.has_role?(:admin_user) %>
        <% joint_licenses = @provider.license_agreements.join("\n") %>
        <% licenses = @provider.license_agreements.count == 0 ? "(None)": @provider.license_agreements.join("\n") %>
        <% t.edit_cell(:license_agreements, :content => licenses, :show_width => 2) do |f| %>
          <%= f.text_area :license_agreements, :value => joint_licenses, :content => joint_licenses, :rows => 5, :cols => 40 %><br>
          <div class="field_explanation">Enter one agreement name per line. Note that only alphanumeric characters, underscores (_) and dashes (-) are accepted.</div>
        <% end %>
      <% else %>
        <% t.empty_cell %>
      <% end %>

    <% end %>

    <% if is_new_record || (has_owner_access && needs_ssh_config) %>
      <%= show_table(@provider, :form_helper => cf, :as => :data_provider, :header => "SSH parameters", :edit_condition => true) do |t| %>
        <% t.edit_cell(:remote_host, :show_width => 2)  do |f| %>
          <%= f.text_field :remote_host, :size => 40 %>
        <% end %>
        <% if check_role(:admin_user) %>
          <% t.edit_cell(:alternate_host, :show_width => 2, :header => "Alternate hostname(s)")  do |f| %>
            <%= f.text_field :alternate_host, :size => 100 %><br />
            <div class="field_explanation">Comma-separated list of alternate hostnames; hostname1,hostname2,hostname3,...</div>
          <% end %>
        <% end %>
        <% t.edit_cell(:remote_user) do |f| %>
          <%= f.text_field :remote_user, :size => 40 %>
        <% end %>
        <% t.edit_cell(:remote_port) do |f| %>
          <%= f.text_field :remote_port, :size => 6 %>
        <% end %>
      <% end %>
    <% end %>

    <% if ( !@is_personal &&  is_new_record || (@provider.is_a?(SingSquashfsDataProvider) || @provider.is_a?(SingBindmountDataProvider))) %>
      <%= show_table(@provider, :form_helper => cf, :as => :data_provider, :header => "Containerized Storage Configuration", :edit_condition => true) do |t| %>
        <% t.edit_cell(:containerized_path, :header => 'Containerized Data Path', :show_width => 2) do %>
          <%= text_field_tag "data_provider[containerized_path]", @provider.containerized_path, :size => 80 %>
        <% end %>
      <% end %>
    <% end %>

    <% if @provider.is_a?(S3DataProvider) || @provider.is_a?(S3FlatDataProvider) || (is_new_record && @typelist.include?("Cloud")) %>
      <%= show_table(@provider, :form_helper => cf, :as => :data_provider, :header => "Cloud Storage Configuration", :edit_condition => true) do |t| %>
        <% t.edit_cell(:cloud_storage_client_identifier, :header => 'Client Identifier', :show_width => 2)  do |f| %>
          <%= f.text_field :cloud_storage_client_identifier, :size => 40, :autocomplete => 'off' %>
        <% end %>
        <% t.edit_cell(:cloud_storage_client_token, :content => '****************', :header => 'Client Token', :show_width => 2) do |f| %>
          <%= f.password_field :cloud_storage_client_token, :size => 80, :autocomplete => 'off' %>
        <% end %>
        <% t.edit_cell(:cloud_storage_client_bucket_name, :header => 'Client Bucket Name' + (is_new_record ? '' : ' (Only needed for S3FlatDataProvider)'), :show_width => 2) do |f| %>
          <%= f.text_field :cloud_storage_client_bucket_name, :size => 80 %>
        <% end %>
        <% t.edit_cell(:cloud_storage_client_path_start, :header => 'Client Starting Path' + (is_new_record ? '' : ' (Only needed for S3FlatDataProvider)'), :show_width => 2) do |f| %>
          <%= f.text_field :cloud_storage_client_path_start, :size => 80 %>
        <% end %>
        <% t.edit_cell(:cloud_storage_endpoint, :header => 'Endpoint' + (is_new_record ? '' : ' (Only needed for S3FlatDataProvider)'), :show_width => 2) do |f| %>
          <%= f.text_field :cloud_storage_endpoint, :size => 80 %>
        <% end %>
        <% t.edit_cell(:cloud_storage_region, :header => 'Region' + (is_new_record ? '' : ' (Only needed for S3FlatDataProvider)'), :show_width => 2) do |f| %>
          <%= f.text_field :cloud_storage_region, :size => 80 %>
        <% end %>
      <% end %>
    <% end %>

    <% if @provider.is_a?(DataladDataProvider) || (is_new_record && @typelist.include?("DataladProvider")) %>
      <%= show_table(@provider, :form_helper => cf, :as => :data_provider, :header => "Datalad Configuration", :edit_condition => true) do |t| %>
        <% t.edit_cell(:datalad_repository_url, :header => 'Datalad Repository URL', :show_width => 2) do |f| %>
          <%= f.text_field :datalad_repository_url %>
        <% end %>
        <% t.edit_cell(:datalad_relative_path, :header => 'Datalad Relative Path', :show_width => 2) do |f| %>
          <%= f.text_field :datalad_relative_path %>
        <% end %>
      <% end %>
    <% end %>

    <% if !@is_personal %>
      <%= show_table(@provider, :form_helper => cf, :as => :data_provider, :header => "Other Properties", :edit_condition => (check_role(:admin_user) || @provider.user_id == current_user.id)) do |t| %>

        <% t.boolean_edit_cell("meta[no_uploads]", is_new_record ? @unsaved_meta[:no_uploads] || false : @provider.meta[:no_uploads],  "on", "", :header => "Cannot be used for uploading files in the file manager") %>

        <% t.boolean_edit_cell("meta[no_viewers]", is_new_record ? @unsaved_meta[:no_viewers] || false : @provider.meta[:no_viewers],  "on", "", :header => "Files cannot be viewed in the file manager") %>

        <% if is_new_record || @provider.is_browsable? %>

          <% t.boolean_edit_cell("meta[must_move]", is_new_record ? @unsaved_meta[:must_move] || false : @provider.meta[:must_move], "on", "", :header => "Files must be copied/moved upon registration") %>

          <% browse_gid = !is_new_record ? @provider.meta[:browse_gid].present? : (@unsaved_meta && @unsaved_meta[:browse_gid].present?)  %>
          <% t.edit_cell("meta[browse_gid]",
              :header  => "Files can be browsed only by members of this project",
              :content => !is_new_record && browse_gid ? link_to_group_if_accessible(@provider.meta[:browse_gid]) : '(Any Users)',
              :show_width => 2
            ) do %>
            <%= group_select 'meta[browse_gid]', { :selector => (is_new_record ? @unsaved_meta[:browse_gid] : @provider.meta[:browse_gid]) }, { :include_blank => "(Any Users)" } %>
          <% end %>

        <% end %>

      <% end %>



      <% other_dps       = DataProvider.find_all_accessible_by_user(current_user).reject { |dp| dp.id == @provider.id } %>
      <% dps_by_category = other_dps.to_a.hashed_partitions { |dp| dp.is_browsable? ? :user : :official } %>

      <% if other_dps.size > 0 %>

        <%= show_table(@provider, :form_helper => cf, :as => :data_provider, :width => 5, :header => 'Files can be copied or moved to these other Data Providers', :edit_condition => (check_role(:admin_user) || @provider.user_id == current_user.id)) do |t| %>
          <% if dps_by_category[:official] %>
            <% t.row(:class => 'subheader') { "<strong>Official Storage</strong>".html_safe } %>
            <% dps_by_category[:official].sort_by(&:name).each do |dp| %>
              <% meta_key = "dp_no_copy_#{dp.id}" %>
              <% t.boolean_edit_cell("meta[#{meta_key}]", is_new_record ? @unsaved_meta[meta_key] || false : @provider.meta[meta_key].to_s, "", "disabled", :header => "#{dp.name}", :class => 'checkbox_label') %>
            <% end%>
          <% end%>

          <% t.blank_row %>

          <% if dps_by_category[:user] %>
            <% t.row(:class => 'subheader') { "<strong>User or Site Storage</strong>".html_safe } %>
            <% dps_by_category[:user].sort_by(&:name).each do |dp| %>
              <% meta_key = "dp_no_copy_#{dp.id}" %>
              <% t.boolean_edit_cell("meta[#{meta_key}]", is_new_record ? @unsaved_meta[meta_key] || false : @provider.meta[meta_key].to_s, "", "disabled", :header => "#{dp.name}", :class => 'checkbox_label') %>
            <% end%>
          <% end%>
        <% end%>
      <% end%>
    <% end%>

    <% other_rrs       = RemoteResource.find_all_accessible_by_user(current_user) %>
    <% rrs_by_category = other_rrs.to_a.hashed_partitions { |rr| rr.is_a?(Bourreau) ? :bourreau : :portal } %>

    <% if other_rrs.size > 0 %>

      <%= show_table(@provider, :form_helper => cf, :as => :data_provider, :width => 5, :header => 'File contents can be accessed by these Servers', :edit_condition => (check_role(:admin_user) || @provider.user_id == current_user.id)) do |t| %>
        <% if rrs_by_category[:portal] %>
          <% t.row(:class => 'subheader') { "<strong>Portals<strong>".html_safe } %>
          <% rrs_by_category[:portal].sort_by(&:name).each do |rr| %>
            <% meta_key = "rr_no_sync_#{rr.id}" %>
            <% t.boolean_edit_cell("meta[#{meta_key}]", is_new_record ? @unsaved_meta[meta_key].to_s : @provider.meta[meta_key].to_s, "", "#{rr.name} cannot sync #{@provider.name}", :header => "#{rr.name}", :class => 'checkbox_label') %>
          <% end%>
        <% end%>

        <% t.blank_row %>

        <% if rrs_by_category[:bourreau] %>
          <% t.row(:class => 'subheader') { "<strong>Execution Servers<strong>".html_safe } %>
          <% rrs_by_category[:bourreau].sort_by(&:name).each do |rr| %>
            <% meta_key = "rr_no_sync_#{rr.id}" %>
            <% t.boolean_edit_cell("meta[#{meta_key}]", is_new_record ? @unsaved_meta[meta_key].to_s : @provider.meta[meta_key].to_s, "", "#{rr.name} cannot sync #{@provider.name}", :header => "#{rr.name}", :class => 'checkbox_label') %>
          <% end%>
        <% end%>
      <% end%>
    <% end%>
  <% end %>
</div>

<p>

<% if has_owner_access %>
  <% if include_personal_ssh %>
    <%= render :partial => 'show_user_key' %>
  <% end %>
  <% if needs_ssh_config || (is_new_record && include_ssh) %>
  <br>
  <div>
    <table>
      <tr><th colspan="2" class="supertitle">Public SSH Key for this CBRAIN Portal</th></tr>
      <tr><td>This key should be installed on this Data Provider's host machine to allow remote access.</td></tr>
      <tr><td><PRE class="ssh_key"><%= pretty_ssh_key(RemoteResource.current_resource.get_ssh_public_key || 'Unknown! Talk to sysadmin!') %></PRE></td></tr>
    </table>
  </div>
  <% end %>

  <p>

  <%= render :partial => "layouts/log_report", :locals  => { :log  => @provider.getlog, :title => "Data Provider Log" } %>
<% end %>

