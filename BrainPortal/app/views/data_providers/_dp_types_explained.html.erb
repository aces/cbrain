
This document describes the different types of Data Providers
implemented in CBRAIN. Not all of them are useful. In production
environments, the recommended type is the <strong>EnCbrainSmartDataProvider</strong>
for official data storage and <strong>FlatDirSshDataProvider</strong> for user-specific
personal storage.

<p>
Many provider types come in three variations:

<dl>
  <dt>Local</dt>
  <dd><em>Type</em><strong>Local</strong>DataProviders
  store their information on the local file system where the CBRAIN service
  resides; as such it means that the files will not be accessible from
  other remote components of the CBRAIN installation, for instance
  Execution Servers located on other hosts or supercomputers. Their
  advantage is that they are fast to access, and the CBRAIN portal will
  not have to make a local copy of any of the files to work on them
  or visualize them.
  </dd>

  <dt>Ssh</dt>
  <dd><em>Type</em><strong>Ssh</strong>DataProviders
  store their information on file system located on a remote UNIX machine
  accessible using a SSH account; a file's content is fetched and cached using
  SFTP or the <em>rsync</em> command and copied locally whenever any
  component of CBRAIN (including the portal) need to access it.
  </dd>

  <dt>Smart</dt>
  <dd><em>Type</em><strong>Smart</strong>DataProviders
  are intelligent in that they will act as either a <strong>Local</strong> or
  <strong>Ssh</strong> variant of the same type. The choice is made by
  each CBRAIN component (Portal, Execution server) independently. Each
  component compares the hostname where it runs to the <em>Remote Hostname</em>
  configured for the DataProvider; if they match, the <strong>Smart</strong>
  DataProvider will act as a <strong>Local</strong> one, bypassing any form
  of caching. If they don't match, it will act as a <strong>Ssh</strong> one,
  therefore transfering files and caching them as needed.
  </dd>
</dl>

<hr>

The rest of this document describes the different types available, which
differ in <em>what kind of file structure</em> they use to store the
files of the users.

<strong>FlatDir*DataProvider:</strong>
The provider's files are stored in a flat directory, one
level deep, directly specified by the object's <em>Remote Directory</em>
attribute. The file "hello" is this stored in a path like this:
<pre>    /remote_dir/hello</pre>
Note that for historical reasons, the <strong>SshDataProvider</strong>
is a synonym for <strong>FlatDirSshDataProvider</strong>.

<p>

<strong>EnCbrain*DataProvider:</strong> The
files are stored in a path uniquely determined by
the file's ID. A file named "hello" with ID 41233 will be stored
like this:
<pre>    /root_dir/04/12/33/hello</pre>
Such data providers have the advantage that files can be renamed and
reassigned to new owners with minimal modifications on the filesystem's
structure. The EnCbrain*DataProviders are the officially recommended
data providers for production deployment. The data directory where
files are stored are <em>not meant to be accessed and modified by
external means</em>, that means no users are supposed to access
the files directly in there.
<p>

<strong>Vault*DataProvider:</strong>
The provider's files are stored in a flat directory, two levels
deep, directly specified by the object's <em>Remote Directory</em>
attribute and the user's login name. The file "hello"
of user "myuser" is thus stored into a path like this:
<pre>    /remote_dir/myuser/hello</pre>
On such data providers, it is not possible to reassign ownership
of a file.
<p>

<strong>IncomingVault*DataProvider:</strong> This class behaves like the
VaultSshDataProvider, except that it is browsable. When browsing, only
the subdirectory named like the login name of the current user will
be visible. It is perfect for accessing
a jailed <em>Remote Directory</em> for incoming content, where users
can upload files to these subdirectories on other channels. A typical
setup would also use the <em>Remote Directory</em> as the root for
an incoming SFTP or FTP server (this is in fact the reason why this
type of provider is named like this).
<p>

<strong>S3DataProvider:</strong> This class connects to Amazon's S3
cloud storage service. The files will be stored in a bucket named
"gbrain_{name}" where name is the name of the Data Provider.
Usage of this Data Provider requires obtaining an access key
and secret token. Do not rename this Data Provider if files
are registered with it, unless you also rename the bucket!

