#!/bin/bash

#
# CBRAIN Project
#
# Copyright (C) 2008-2020
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#
# This small wrapper is a replacement for the
# 'establish a secondary tunnel to submit host'
# feature of cbrain_remote_ctl_rb (which was the
# original content of this file here, but required
# a lot more ruby libs). Since in the case where
# we need a secondary tunnel, we are often on a
# very plain login node, this script requires no
# ruby and just works with plain bash commands.
# In MOST situations in fact, this script's content
# is not used and the arguments are completely all
# delegated to the original cbrain_remote_ctl_rb.
#

this_script=$(readlink -e "$0" 2>/dev/null)
# On non-linux, "readlink -e" doesn't exist... :-(
if test -z "$this_script" ; then
  this_script="$0"
  if [[ "$this_script" != /* ]] ; then
    this_script="$PWD/$this_script" # good enough
  fi
fi
this_script_dir=$(dirname $this_script)

# This is the most common case
if test "$#" -lt 6 -o "X$1" != "X-R" -o "X$3" != "X-H" -o "X$5" != "X-D" ; then
  echo "Transfering control from $this_script to cbrain_remote_ctl_rb"
  exec "$this_script_dir"/cbrain_remote_ctl_rb "$@"
  exit 10 # should never get here
fi

# The less common case: we are on a plain login node with
# none of the ruby libs needed by cbrain_remote_ctl_rb.

# Arguments all have a hardcoded index number in this mode.
remhost="$2"
httpport="$4"
dbport="$6"
myhost=$(hostname)
shift 6

umask 077 # for socket access permissions
controlsocket="/tmp/cbrain-login-to-submit.sock"

if test -S $controlsocket ; then
  echo "Found existing master from login host $myhost to backend $remhost"
  if ! ssh -N -o ControlPath=$controlsocket -O check $remhost ; then
    echo "The master seems to be dead, removing socket"
    rm -f $controlsocket
  fi
fi

if ! test -S $controlsocket ; then
  echo "Establishing new master from login host $myhost to backend $remhost"
  ssh -A -f -n -N -x                     \
    -o BatchMode=yes                     \
    -o ControlMaster=yes                 \
    -o ControlPath=$controlsocket        \
    -o ExitOnForwardFailure=yes          \
    -L ${httpport}:localhost:${httpport} \
    -R ${dbport}:localhost:${dbport}     \
    -p 22                                \
    $remhost

  ssh_status=$?
  if test $ssh_status -gt 0 ; then
    echo "Could not start SSH master: status $ssh_status" 1>&2
    exit $ssh_status
  fi
fi

# Invoke the RB version of the control script, on the remote side, using
# the master. The current STDIN will be connected to the remote
# STDIN for transmission of the DB config file, if necessary.
ssh -A -x                               \
    -o ExitOnForwardFailure=true        \
    -o ControlMaster=no                 \
    -o ControlPath=$controlsocket       \
    $remhost                            \
    "cd \"$this_script_dir\"; bundle exec \"$this_script\"_rb $@ 2>&1"

# If the main command ($1) is "stop", we also stop the local master
if test "X$1" = "Xstop" ; then
  echo "Stopping master from login host $myhost to backend $remhost"
  # This is nice, this -O option for controlling the master
  ssh -n -N -x \
    -o ControlPath=$controlsocket \
    -O exit                       \
    $remhost
fi

exit 0
