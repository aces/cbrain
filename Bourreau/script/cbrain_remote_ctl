#!/bin/bash

#
# CBRAIN Project
#
# Copyright (C) 2008-2021
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# This script is a wrapper that launches the normal Rails server,
# but with the added ability of receiving the content of the database.yml
# file in standard output before it does so. Also, once the server is
# started, the database.yml is deleted outright.
#
# This script it NOT usually executed by a human, instead it is
# invoked by the Portal when trying to start or stop a Bourreau.
#
# The command-line args are to be provided strictly in the order shown
# below, and all of them should be present (this is done simply so that
# this bash script is kept simple).
#
# -----------------------
# To start the Rails app:
#
#   $0 start -e <environment>
#
# which will result in reading the database.yml from stdin, installing
# it, executing this command
#
#   script/puma_wait_wrapper
#
# which starts
#
#   puma --config config/puma.rb
#
# and finally removing the database.yml file. Any database.yml file
# already present before doing all this will be erased.
#
# ----------------------
# To stop the Rails app:
#
#   $0 stop
#
# which will result in killing the rails app.
#
# -------------------
# To start a console:
#
#   $0 console -e <environment>

#########################
# S U B R O U T I N E S #
#########################

# Usage
function usage {
  echo "Usage: $0 start -e <environment>"
  echo "       $0 stop"
  echo "       $0 console -e <environment>"
  exit 10
}

# Fatal error message
function fatal {
  echo "$*"
  exit 20
}

# This program only works if its CWD is the Bourreau's root dir.
# We verify this by checking for the presence of a particular file
if ! test -f "app/models/bourreau_worker.rb" ; then
  fatal "This program '$0' must be started from the Bourreau directory."
fi

# Run-time paths and names of host and program
basename=$(basename $0)
curhost=$(hostname -s)
rails_home=$PWD

# Rails-specific paths.
# Alongside the PID file, we maintain the hostname where
# the Bourreau was previously started.
db_file="config/database.yml"
pidfile="tmp/pids/server.pid"
pidhost="$pidfile.hostname"

# Values from previous 'start' operation
prevpid=$(cat $pidfile 2>/dev/null)
prevhost=$(cat $pidhost 2>/dev/null)

# Advanced socket paths (as established by the script 'cbrain_reverse_ssh')
# In the case where the system is not booted with that script, the paths
# will be different: the DB socket will be found by the most recent
# timestamp, and the SSH agent will be just whatever the master SSH sets.
database_sock="$rails_home"/tmp/sockets/db.$curhost.remote_ssh.sock
sshagent_sock="$rails_home"/tmp/sockets/ssa.$curhost.remote_ssh.sock

# Check usage
if test $# -ne 1 -a $# -ne 3 ; then # 1 or 3 args!
  usage
fi

# Auto cleanup no matter what
trap "rm -f $db_file" EXIT


#############################################################
# Utility functions
#############################################################

# Returns true if we can find the socketpath (which must
# exists on the filesystem) among the list of those bound
# to a process. Hopefully this works on Linux as well as MacOS.
function check_unix_socket {
  socketpath=$(realpath $1 2>/dev/null)
  if ! test -S "$socketpath" ; then
    return 1 # nope
  fi
  lsof -w -a -U -u$USER | grep -q "$socketpath" # grep will return 0 or 1
}

#############################################################
# STOP
#############################################################

if test $# -eq 1 ; then
  test "$1" = "stop" || usage
  if test "$prevhost" != "$curhost" ; then
    test -z "$prevhost" && prevhost='(unknown)' # prettier fatal message
    test -z "$prevpid"  && prevpid='(unknown)'  # prettier fatal message
    fatal "Could not stop Bourreau app, it was last started on host $prevhost as PID $prevpid, and we are on host $curhost"
  fi
  test -z "$prevpid" && fatal "Cannot stop Bourreau: could not find/open PID file '$pidfile'."
  kill -TERM $prevpid # this should also remove $pidfile during teardown
  echo "Bourreau Stopped"
  rm -f $pidhost
  exit 0
fi


#############################################################
# ARGUMENT CHECKS FOR OTHER MODES (start or console)
#############################################################

# start -e env
# console -e env
test "X$2" != "X-e" && usage
mode="$1" # 'start' or 'console'
environment="$3"
test "X$mode" != "Xstart" -a "X$mode" != "Xconsole" && usage

if test "X$environment" != "Xdevelopment" -a "X$environment" != "Xproduction" ; then
  fatal "Environment argument must be 'production' or 'development'"
fi

# Check for existing PID file
# and cleanup if necessary
if test "$mode" = "start" -a -n "$prevpid" ; then

  # If it was started on a different login node, we can't do anything else
  if test "$prevhost" != "" -a "$prevhost" != "$curhost" ; then
    fatal "The Rails app seems to be running already on a different host, $prevhost as PID $prevpid"
  fi

  # The 'ps' command below echoes back the PID if the process exists,
  # and it happens to work on both Linux and MacOS.
  exists=$( ps -p $prevpid -o pid= | tr -cd 0-9 )
  if test "X$exists" = "X$prevpid" ; then
    fatal "The Rails app seems to be running already as PID $prevpid."
  fi
  # OK so the process seems to be dead, let's just clean up.
  rm -f $pidfile
  rm -f $pidhost
fi

# Find DB socket filename:
# 1. try the one created by cbrain_reverse_ssh
if check_unix_socket "$database_sock" ; then
  sockfile="$database_sock"
else
  # 2. Find the most recently created DB socket filename
  sockfile=$( /bin/ls -1tr tmp/sockets/db.*.sock 2>/dev/null | tail -1 )
  if test "X$sockfile" = "X" ; then
    fatal "Could not find a DB socket in tmp/sockets/db.*.sock"
  fi
  if ! check_unix_socket "$sockfile" ; then
    fatal "Found DB socket '$sockfile' but it doesn't seem to be connected."
  fi
fi
sockfile=$(realpath "$sockfile")

# Erase older DB socket files
for badsock in tmp/sockets/db.*.sock ; do
  badsock=$(realpath "$badsock")
  test "X$badsock" = "X$sockfile" && continue # skip good one
  rm -f "$badsock"
done

# SSH Auth sock: if present, use it. This happens in the case of
# cbrain_reverse_ssh . Otherwise, whatever socket is set by the
# current SSH master will be used.
if check_unix_socket "$sshagent_sock" ; then
  export SSH_AUTH_SOCK="$sshagent_sock" # crushes any existing ENV var
fi

# In 'start' mode, we get the content of the database.yml
# from STDIN stream. In 'console' mode, the content is already
# installed in place by a separate 'cat' command issued
# by the portal (see in bourreau.rb).
if test -s $db_file ; then
  # This takes the current file's content and makes the substitution in it.
  # Mostly used in 'console' mode but it can happen in 'start' mode if
  # a developer has installed manually a DB file.
  cat $db_file | sed -e 's@socket:.*@socket: '"$sockfile"'@' > $db_file.tmp
  mv -f $db_file.tmp $db_file
else
  # This gets the file's content from STDIN and makes the substitution in it before writing.
  # Only used in 'start' mode.
  cat | sed -e 's@socket:.*@socket: '"$sockfile"'@' > $db_file
fi


###########################################
# CONSOLE START
###########################################

if test "$mode" = "console" ; then
  echo ""
  echo "Bourreau Console Starting on $curhost."
  script/rails console $environment # this will BLOCK
  errcode=$?
  echo ""
  echo "Bourreau Console Exiting on $curhost."
  rm -f $db_file
  exit $errcode # all done
fi


###########################################
# BOURREAU START
###########################################

# Rename log files when they are too big
date_extension=$( date +"%Y-%m-%d" )
start_log_file="log/server_start.log"
environment_log_file="log/$environment.log"
if test -s $start_log_file ; then
  if test $( find $start_log_file -size +1M -print | wc -l ) -gt 0 ; then # if size > 1M; works on MacOS too
    renamed=$( echo $start_log_file | sed -e "s/.log/_$date_extension.log/ ")
    mv $start_log_file $renamed
  fi
fi
if test -s $environment_log_file ; then
  if test $( find $environment_log_file -size +1M -print | wc -l ) -gt 0 ; then # if size > 1M; works on MacOS too
    renamed=$( echo $environment_log_file | sed -e "s/.log/_$date_extension.log/" )
    mv $environment_log_file $renamed
  fi
fi

# Start the server
export RAILS_ENV=$environment  # puma's mode of operation is passed through an env var
# puma_wait_wrapper is a custom bash program that starts puma
# and waits to make sure it booted properly
script/puma_wait_wrapper
start_success=$?

# If we were provided with a database.yml, we need
# delete it once the server has read it.
rm -f $db_file

# Return a message to indicate to our calling context
# whether or not the server started.
if test $start_success -eq 0 ; then
  echo "Bourreau Started." # This string is used and checked by the Portal controller!
  echo $curhost > $pidhost # write back current hostname
  exit 0
fi

echo "Bourreau application failed to start properly."
#if test -s $start_log_file ; then
#  echo "Here are the last 200 lines of the server's log:"
#  tail -200 $start_log_file
#else
#  echo "No server log file found to help you out of this one :-("
#fi
exit 10 # bad

